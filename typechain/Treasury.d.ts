/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TreasuryInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity()": FunctionFragment;
    "addWhitelists(address[])": FunctionFragment;
    "busd()": FunctionFragment;
    "busdBasisPoints()": FunctionFragment;
    "busdHardCap()": FunctionFragment;
    "busdReceived()": FunctionFragment;
    "busdSlotCap()": FunctionFragment;
    "endSwap()": FunctionFragment;
    "extendUnlockTime(uint256)": FunctionFragment;
    "fund()": FunctionFragment;
    "gov()": FunctionFragment;
    "increaseBusdBasisPoints(uint256)": FunctionFragment;
    "initialize(address[],uint256[])": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isLiquidityAdded()": FunctionFragment;
    "isSwapActive()": FunctionFragment;
    "removeWhitelists(address[])": FunctionFragment;
    "router()": FunctionFragment;
    "setFund(address)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "swap(uint256)": FunctionFragment;
    "swapAmounts(address)": FunctionFragment;
    "swapWhitelist(address)": FunctionFragment;
    "unlockTime()": FunctionFragment;
    "updateWhitelist(address,address)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
    "zmt()": FunctionFragment;
    "zmtListingPrice()": FunctionFragment;
    "zmtPresalePrice()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelists",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "busd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "busdBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "busdHardCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "busdReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "busdSlotCap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extendUnlockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fund", values?: undefined): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseBusdBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidityAdded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSwapActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelists",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "setFund", values: [string]): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(functionFragment: "swap", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "swapAmounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "zmt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zmtListingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zmtPresalePrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "busd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "busdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "busdHardCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "busdReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "busdSlotCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseBusdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSwapActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zmt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zmtListingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zmtPresalePrice",
    data: BytesLike
  ): Result;

  events: {};
}

export class Treasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryInterface;

  functions: {
    addLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhitelists(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    busd(overrides?: CallOverrides): Promise<[string]>;

    busdBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    busdHardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    busdReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    busdSlotCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    endSwap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendUnlockTime(
      _unlockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fund(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    increaseBusdBasisPoints(
      _busdBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _addresses: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isLiquidityAdded(overrides?: CallOverrides): Promise<[boolean]>;

    isSwapActive(overrides?: CallOverrides): Promise<[boolean]>;

    removeWhitelists(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setFund(
      _fund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _busdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAmounts(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    swapWhitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    unlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateWhitelist(
      prevAccount: string,
      nextAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zmt(overrides?: CallOverrides): Promise<[string]>;

    zmtListingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    zmtPresalePrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addLiquidity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhitelists(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  busd(overrides?: CallOverrides): Promise<string>;

  busdBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  busdHardCap(overrides?: CallOverrides): Promise<BigNumber>;

  busdReceived(overrides?: CallOverrides): Promise<BigNumber>;

  busdSlotCap(overrides?: CallOverrides): Promise<BigNumber>;

  endSwap(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendUnlockTime(
    _unlockTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fund(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  increaseBusdBasisPoints(
    _busdBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _addresses: string[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isLiquidityAdded(overrides?: CallOverrides): Promise<boolean>;

  isSwapActive(overrides?: CallOverrides): Promise<boolean>;

  removeWhitelists(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setFund(
    _fund: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _busdAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  swapWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  updateWhitelist(
    prevAccount: string,
    nextAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zmt(overrides?: CallOverrides): Promise<string>;

  zmtListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

  zmtPresalePrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addLiquidity(overrides?: CallOverrides): Promise<void>;

    addWhitelists(
      _accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    busd(overrides?: CallOverrides): Promise<string>;

    busdBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    busdHardCap(overrides?: CallOverrides): Promise<BigNumber>;

    busdReceived(overrides?: CallOverrides): Promise<BigNumber>;

    busdSlotCap(overrides?: CallOverrides): Promise<BigNumber>;

    endSwap(overrides?: CallOverrides): Promise<void>;

    extendUnlockTime(
      _unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fund(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    increaseBusdBasisPoints(
      _busdBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _addresses: string[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isLiquidityAdded(overrides?: CallOverrides): Promise<boolean>;

    isSwapActive(overrides?: CallOverrides): Promise<boolean>;

    removeWhitelists(
      _accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setFund(_fund: string, overrides?: CallOverrides): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    swap(_busdAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swapAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    updateWhitelist(
      prevAccount: string,
      nextAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    zmt(overrides?: CallOverrides): Promise<string>;

    zmtListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    zmtPresalePrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhitelists(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    busd(overrides?: CallOverrides): Promise<BigNumber>;

    busdBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    busdHardCap(overrides?: CallOverrides): Promise<BigNumber>;

    busdReceived(overrides?: CallOverrides): Promise<BigNumber>;

    busdSlotCap(overrides?: CallOverrides): Promise<BigNumber>;

    endSwap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendUnlockTime(
      _unlockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fund(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    increaseBusdBasisPoints(
      _busdBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _addresses: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidityAdded(overrides?: CallOverrides): Promise<BigNumber>;

    isSwapActive(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelists(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setFund(
      _fund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _busdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    updateWhitelist(
      prevAccount: string,
      nextAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zmt(overrides?: CallOverrides): Promise<BigNumber>;

    zmtListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    zmtPresalePrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhitelists(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    busd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    busdBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    busdHardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    busdReceived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    busdSlotCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endSwap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendUnlockTime(
      _unlockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseBusdBasisPoints(
      _busdBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _addresses: string[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLiquidityAdded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSwapActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelists(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFund(
      _fund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _busdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateWhitelist(
      prevAccount: string,
      nextAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zmt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zmtListingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zmtPresalePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
