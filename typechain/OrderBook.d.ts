/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrderBookInterface extends ethers.utils.Interface {
  functions: {
    "PRICE_PRECISION()": FunctionFragment;
    "USDG_PRECISION()": FunctionFragment;
    "cancelDecreaseOrder(uint256)": FunctionFragment;
    "cancelIncreaseOrder(uint256)": FunctionFragment;
    "cancelMultiple(uint256[],uint256[],uint256[])": FunctionFragment;
    "cancelSwapOrder(uint256)": FunctionFragment;
    "createDecreaseOrder(address,uint256,address,uint256,bool,uint256,bool)": FunctionFragment;
    "createIncreaseOrder(address[],uint256,address,uint256,uint256,address,bool,uint256,bool,uint256,bool)": FunctionFragment;
    "createSwapOrder(address[],uint256,uint256,uint256,bool,uint256,bool,bool)": FunctionFragment;
    "decreaseOrders(address,uint256)": FunctionFragment;
    "decreaseOrdersIndex(address)": FunctionFragment;
    "executeDecreaseOrder(address,uint256,address)": FunctionFragment;
    "executeIncreaseOrder(address,uint256,address)": FunctionFragment;
    "executeSwapOrder(address,uint256,address)": FunctionFragment;
    "getDecreaseOrder(address,uint256)": FunctionFragment;
    "getIncreaseOrder(address,uint256)": FunctionFragment;
    "getSwapOrder(address,uint256)": FunctionFragment;
    "getUsdgMinPrice(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "increaseOrders(address,uint256)": FunctionFragment;
    "increaseOrdersIndex(address)": FunctionFragment;
    "initialize(address,address,address,address,uint256,uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "minExecutionFee()": FunctionFragment;
    "minPurchaseTokenAmountUsd()": FunctionFragment;
    "router()": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setMinExecutionFee(uint256)": FunctionFragment;
    "setMinPurchaseTokenAmountUsd(uint256)": FunctionFragment;
    "swapOrders(address,uint256)": FunctionFragment;
    "swapOrdersIndex(address)": FunctionFragment;
    "updateDecreaseOrder(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "updateIncreaseOrder(uint256,uint256,uint256,bool)": FunctionFragment;
    "updateSwapOrder(uint256,uint256,uint256,bool)": FunctionFragment;
    "usdg()": FunctionFragment;
    "validatePositionOrderPrice(bool,uint256,address,bool,bool)": FunctionFragment;
    "validateSwapOrderPriceWithTriggerAboveThreshold(address[],uint256)": FunctionFragment;
    "vault()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDG_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDecreaseOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreaseOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMultiple",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSwapOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreaseOrder",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreaseOrder",
    values: [
      string[],
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      boolean,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSwapOrder",
    values: [
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseOrders",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseOrdersIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecreaseOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreaseOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdgMinPrice",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseOrders",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseOrdersIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minExecutionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPurchaseTokenAmountUsd",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMinExecutionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPurchaseTokenAmountUsd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrders",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrdersIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDecreaseOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIncreaseOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "usdg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validatePositionOrderPrice",
    values: [boolean, BigNumberish, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSwapOrderPriceWithTriggerAboveThreshold",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDG_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseOrdersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdgMinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseOrdersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPurchaseTokenAmountUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPurchaseTokenAmountUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapOrdersIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatePositionOrderPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSwapOrderPriceWithTriggerAboveThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "CancelDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256)": EventFragment;
    "CancelIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256)": EventFragment;
    "CancelSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)": EventFragment;
    "CreateDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256)": EventFragment;
    "CreateIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256)": EventFragment;
    "CreateSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)": EventFragment;
    "ExecuteDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256,uint256)": EventFragment;
    "ExecuteIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256,uint256)": EventFragment;
    "ExecuteSwapOrder(address,uint256,address[],uint256,uint256,uint256,uint256,bool,bool,uint256)": EventFragment;
    "Initialize(address,address,address,address,uint256,uint256)": EventFragment;
    "UpdateDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool)": EventFragment;
    "UpdateGov(address)": EventFragment;
    "UpdateIncreaseOrder(address,uint256,address,address,bool,uint256,uint256,bool)": EventFragment;
    "UpdateMinExecutionFee(uint256)": EventFragment;
    "UpdateMinPurchaseTokenAmountUsd(uint256)": EventFragment;
    "UpdateSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelDecreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelIncreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSwapOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateDecreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateIncreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateSwapOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteDecreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteIncreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteSwapOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDecreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateIncreaseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinExecutionFee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateMinPurchaseTokenAmountUsd"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSwapOrder"): EventFragment;
}

export type CancelDecreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    account: string;
    orderIndex: BigNumber;
    collateralToken: string;
    collateralDelta: BigNumber;
    indexToken: string;
    sizeDelta: BigNumber;
    isLong: boolean;
    triggerPrice: BigNumber;
    triggerAboveThreshold: boolean;
    executionFee: BigNumber;
  }
>;

export type CancelIncreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    account: string;
    orderIndex: BigNumber;
    purchaseToken: string;
    purchaseTokenAmount: BigNumber;
    collateralToken: string;
    indexToken: string;
    sizeDelta: BigNumber;
    isLong: boolean;
    triggerPrice: BigNumber;
    triggerAboveThreshold: boolean;
    executionFee: BigNumber;
  }
>;

export type CancelSwapOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ] & {
    account: string;
    orderIndex: BigNumber;
    path: string[];
    amountIn: BigNumber;
    minOut: BigNumber;
    triggerRatio: BigNumber;
    triggerAboveThreshold: boolean;
    shouldUnwrap: boolean;
    executionFee: BigNumber;
  }
>;

export type CreateDecreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    account: string;
    orderIndex: BigNumber;
    collateralToken: string;
    collateralDelta: BigNumber;
    indexToken: string;
    sizeDelta: BigNumber;
    isLong: boolean;
    triggerPrice: BigNumber;
    triggerAboveThreshold: boolean;
    executionFee: BigNumber;
  }
>;

export type CreateIncreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    account: string;
    orderIndex: BigNumber;
    purchaseToken: string;
    purchaseTokenAmount: BigNumber;
    collateralToken: string;
    indexToken: string;
    sizeDelta: BigNumber;
    isLong: boolean;
    triggerPrice: BigNumber;
    triggerAboveThreshold: boolean;
    executionFee: BigNumber;
  }
>;

export type CreateSwapOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ] & {
    account: string;
    orderIndex: BigNumber;
    path: string[];
    amountIn: BigNumber;
    minOut: BigNumber;
    triggerRatio: BigNumber;
    triggerAboveThreshold: boolean;
    shouldUnwrap: boolean;
    executionFee: BigNumber;
  }
>;

export type ExecuteDecreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    account: string;
    orderIndex: BigNumber;
    collateralToken: string;
    collateralDelta: BigNumber;
    indexToken: string;
    sizeDelta: BigNumber;
    isLong: boolean;
    triggerPrice: BigNumber;
    triggerAboveThreshold: boolean;
    executionFee: BigNumber;
    executionPrice: BigNumber;
  }
>;

export type ExecuteIncreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    account: string;
    orderIndex: BigNumber;
    purchaseToken: string;
    purchaseTokenAmount: BigNumber;
    collateralToken: string;
    indexToken: string;
    sizeDelta: BigNumber;
    isLong: boolean;
    triggerPrice: BigNumber;
    triggerAboveThreshold: boolean;
    executionFee: BigNumber;
    executionPrice: BigNumber;
  }
>;

export type ExecuteSwapOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ] & {
    account: string;
    orderIndex: BigNumber;
    path: string[];
    amountIn: BigNumber;
    minOut: BigNumber;
    amountOut: BigNumber;
    triggerRatio: BigNumber;
    triggerAboveThreshold: boolean;
    shouldUnwrap: boolean;
    executionFee: BigNumber;
  }
>;

export type InitializeEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber] & {
    router: string;
    vault: string;
    weth: string;
    usdg: string;
    minExecutionFee: BigNumber;
    minPurchaseTokenAmountUsd: BigNumber;
  }
>;

export type UpdateDecreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    boolean,
    BigNumber,
    boolean
  ] & {
    account: string;
    orderIndex: BigNumber;
    collateralToken: string;
    collateralDelta: BigNumber;
    indexToken: string;
    sizeDelta: BigNumber;
    isLong: boolean;
    triggerPrice: BigNumber;
    triggerAboveThreshold: boolean;
  }
>;

export type UpdateGovEvent = TypedEvent<[string] & { gov: string }>;

export type UpdateIncreaseOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    account: string;
    orderIndex: BigNumber;
    collateralToken: string;
    indexToken: string;
    isLong: boolean;
    sizeDelta: BigNumber;
    triggerPrice: BigNumber;
    triggerAboveThreshold: boolean;
  }
>;

export type UpdateMinExecutionFeeEvent = TypedEvent<
  [BigNumber] & { minExecutionFee: BigNumber }
>;

export type UpdateMinPurchaseTokenAmountUsdEvent = TypedEvent<
  [BigNumber] & { minPurchaseTokenAmountUsd: BigNumber }
>;

export type UpdateSwapOrderEvent = TypedEvent<
  [
    string,
    BigNumber,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ] & {
    account: string;
    ordexIndex: BigNumber;
    path: string[];
    amountIn: BigNumber;
    minOut: BigNumber;
    triggerRatio: BigNumber;
    triggerAboveThreshold: boolean;
    shouldUnwrap: boolean;
    executionFee: BigNumber;
  }
>;

export class OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrderBookInterface;

  functions: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDG_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelDecreaseOrder(
      _orderIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelIncreaseOrder(
      _orderIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelMultiple(
      _swapOrderIndexes: BigNumberish[],
      _increaseOrderIndexes: BigNumberish[],
      _decreaseOrderIndexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSwapOrder(
      _orderIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDecreaseOrder(
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _collateralToken: string,
      _collateralDelta: BigNumberish,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createIncreaseOrder(
      _path: string[],
      _amountIn: BigNumberish,
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _collateralToken: string,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSwapOrder(
      _path: string[],
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean,
      _shouldUnwrap: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        account: string;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    decreaseOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    executeDecreaseOrder(
      _address: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeIncreaseOrder(
      _address: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDecreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    getIncreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    getSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        path0: string;
        path1: string;
        path2: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    getUsdgMinPrice(
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    increaseOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        account: string;
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    increaseOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _router: string,
      _vault: string,
      _weth: string,
      _usdg: string,
      _minExecutionFee: BigNumberish,
      _minPurchaseTokenAmountUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    minExecutionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPurchaseTokenAmountUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinExecutionFee(
      _minExecutionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPurchaseTokenAmountUsd(
      _minPurchaseTokenAmountUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
        account: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    swapOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateDecreaseOrder(
      _orderIndex: BigNumberish,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIncreaseOrder(
      _orderIndex: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSwapOrder(
      _orderIndex: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdg(overrides?: CallOverrides): Promise<[string]>;

    validatePositionOrderPrice(
      _triggerAboveThreshold: boolean,
      _triggerPrice: BigNumberish,
      _indexToken: string,
      _maximizePrice: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    validateSwapOrderPriceWithTriggerAboveThreshold(
      _path: string[],
      _triggerRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USDG_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  cancelDecreaseOrder(
    _orderIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelIncreaseOrder(
    _orderIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelMultiple(
    _swapOrderIndexes: BigNumberish[],
    _increaseOrderIndexes: BigNumberish[],
    _decreaseOrderIndexes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSwapOrder(
    _orderIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDecreaseOrder(
    _indexToken: string,
    _sizeDelta: BigNumberish,
    _collateralToken: string,
    _collateralDelta: BigNumberish,
    _isLong: boolean,
    _triggerPrice: BigNumberish,
    _triggerAboveThreshold: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createIncreaseOrder(
    _path: string[],
    _amountIn: BigNumberish,
    _indexToken: string,
    _minOut: BigNumberish,
    _sizeDelta: BigNumberish,
    _collateralToken: string,
    _isLong: boolean,
    _triggerPrice: BigNumberish,
    _triggerAboveThreshold: boolean,
    _executionFee: BigNumberish,
    _shouldWrap: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSwapOrder(
    _path: string[],
    _amountIn: BigNumberish,
    _minOut: BigNumberish,
    _triggerRatio: BigNumberish,
    _triggerAboveThreshold: boolean,
    _executionFee: BigNumberish,
    _shouldWrap: boolean,
    _shouldUnwrap: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseOrders(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      account: string;
      collateralToken: string;
      collateralDelta: BigNumber;
      indexToken: string;
      sizeDelta: BigNumber;
      isLong: boolean;
      triggerPrice: BigNumber;
      triggerAboveThreshold: boolean;
      executionFee: BigNumber;
    }
  >;

  decreaseOrdersIndex(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeDecreaseOrder(
    _address: string,
    _orderIndex: BigNumberish,
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeIncreaseOrder(
    _address: string,
    _orderIndex: BigNumberish,
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSwapOrder(
    _account: string,
    _orderIndex: BigNumberish,
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDecreaseOrder(
    _account: string,
    _orderIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      collateralToken: string;
      collateralDelta: BigNumber;
      indexToken: string;
      sizeDelta: BigNumber;
      isLong: boolean;
      triggerPrice: BigNumber;
      triggerAboveThreshold: boolean;
      executionFee: BigNumber;
    }
  >;

  getIncreaseOrder(
    _account: string,
    _orderIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      purchaseToken: string;
      purchaseTokenAmount: BigNumber;
      collateralToken: string;
      indexToken: string;
      sizeDelta: BigNumber;
      isLong: boolean;
      triggerPrice: BigNumber;
      triggerAboveThreshold: boolean;
      executionFee: BigNumber;
    }
  >;

  getSwapOrder(
    _account: string,
    _orderIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber
    ] & {
      path0: string;
      path1: string;
      path2: string;
      amountIn: BigNumber;
      minOut: BigNumber;
      triggerRatio: BigNumber;
      triggerAboveThreshold: boolean;
      shouldUnwrap: boolean;
      executionFee: BigNumber;
    }
  >;

  getUsdgMinPrice(
    _otherToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  increaseOrders(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      account: string;
      purchaseToken: string;
      purchaseTokenAmount: BigNumber;
      collateralToken: string;
      indexToken: string;
      sizeDelta: BigNumber;
      isLong: boolean;
      triggerPrice: BigNumber;
      triggerAboveThreshold: boolean;
      executionFee: BigNumber;
    }
  >;

  increaseOrdersIndex(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _router: string,
    _vault: string,
    _weth: string,
    _usdg: string,
    _minExecutionFee: BigNumberish,
    _minPurchaseTokenAmountUsd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

  minPurchaseTokenAmountUsd(overrides?: CallOverrides): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinExecutionFee(
    _minExecutionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPurchaseTokenAmountUsd(
    _minPurchaseTokenAmountUsd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapOrders(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
      account: string;
      amountIn: BigNumber;
      minOut: BigNumber;
      triggerRatio: BigNumber;
      triggerAboveThreshold: boolean;
      shouldUnwrap: boolean;
      executionFee: BigNumber;
    }
  >;

  swapOrdersIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  updateDecreaseOrder(
    _orderIndex: BigNumberish,
    _collateralDelta: BigNumberish,
    _sizeDelta: BigNumberish,
    _triggerPrice: BigNumberish,
    _triggerAboveThreshold: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIncreaseOrder(
    _orderIndex: BigNumberish,
    _sizeDelta: BigNumberish,
    _triggerPrice: BigNumberish,
    _triggerAboveThreshold: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSwapOrder(
    _orderIndex: BigNumberish,
    _minOut: BigNumberish,
    _triggerRatio: BigNumberish,
    _triggerAboveThreshold: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdg(overrides?: CallOverrides): Promise<string>;

  validatePositionOrderPrice(
    _triggerAboveThreshold: boolean,
    _triggerPrice: BigNumberish,
    _indexToken: string,
    _maximizePrice: boolean,
    _raise: boolean,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  validateSwapOrderPriceWithTriggerAboveThreshold(
    _path: string[],
    _triggerRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDecreaseOrder(
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelIncreaseOrder(
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelMultiple(
      _swapOrderIndexes: BigNumberish[],
      _increaseOrderIndexes: BigNumberish[],
      _decreaseOrderIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSwapOrder(
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createDecreaseOrder(
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _collateralToken: string,
      _collateralDelta: BigNumberish,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createIncreaseOrder(
      _path: string[],
      _amountIn: BigNumberish,
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _collateralToken: string,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createSwapOrder(
      _path: string[],
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean,
      _shouldUnwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        account: string;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    decreaseOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeDecreaseOrder(
      _address: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executeIncreaseOrder(
      _address: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executeSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDecreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    getIncreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    getSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ] & {
        path0: string;
        path1: string;
        path2: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    getUsdgMinPrice(
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    increaseOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        account: string;
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    increaseOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _router: string,
      _vault: string,
      _weth: string,
      _usdg: string,
      _minExecutionFee: BigNumberish,
      _minPurchaseTokenAmountUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minPurchaseTokenAmountUsd(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setMinExecutionFee(
      _minExecutionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPurchaseTokenAmountUsd(
      _minPurchaseTokenAmountUsd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, boolean, boolean, BigNumber] & {
        account: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    swapOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDecreaseOrder(
      _orderIndex: BigNumberish,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIncreaseOrder(
      _orderIndex: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSwapOrder(
      _orderIndex: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    usdg(overrides?: CallOverrides): Promise<string>;

    validatePositionOrderPrice(
      _triggerAboveThreshold: boolean,
      _triggerPrice: BigNumberish,
      _indexToken: string,
      _maximizePrice: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    validateSwapOrderPriceWithTriggerAboveThreshold(
      _path: string[],
      _triggerRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CancelDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256)"(
      account?: string | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    CancelDecreaseOrder(
      account?: string | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    "CancelIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256)"(
      account?: string | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    CancelIncreaseOrder(
      account?: string | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    "CancelSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)"(
      account?: string | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        path: string[];
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    CancelSwapOrder(
      account?: string | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        path: string[];
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    "CreateDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256)"(
      account?: string | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    CreateDecreaseOrder(
      account?: string | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    "CreateIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256)"(
      account?: string | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    CreateIncreaseOrder(
      account?: string | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
      }
    >;

    "CreateSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)"(
      account?: string | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        path: string[];
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    CreateSwapOrder(
      account?: string | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        path: string[];
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    "ExecuteDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool,uint256,uint256)"(
      account?: string | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null,
      executionPrice?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
        executionPrice: BigNumber;
      }
    >;

    ExecuteDecreaseOrder(
      account?: string | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null,
      executionPrice?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
        executionPrice: BigNumber;
      }
    >;

    "ExecuteIncreaseOrder(address,uint256,address,uint256,address,address,uint256,bool,uint256,bool,uint256,uint256)"(
      account?: string | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null,
      executionPrice?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
        executionPrice: BigNumber;
      }
    >;

    ExecuteIncreaseOrder(
      account?: string | null,
      orderIndex?: null,
      purchaseToken?: null,
      purchaseTokenAmount?: null,
      collateralToken?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null,
      executionFee?: null,
      executionPrice?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        purchaseToken: string;
        purchaseTokenAmount: BigNumber;
        collateralToken: string;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
        executionFee: BigNumber;
        executionPrice: BigNumber;
      }
    >;

    "ExecuteSwapOrder(address,uint256,address[],uint256,uint256,uint256,uint256,bool,bool,uint256)"(
      account?: string | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      amountOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        path: string[];
        amountIn: BigNumber;
        minOut: BigNumber;
        amountOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    ExecuteSwapOrder(
      account?: string | null,
      orderIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      amountOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ],
      {
        account: string;
        orderIndex: BigNumber;
        path: string[];
        amountIn: BigNumber;
        minOut: BigNumber;
        amountOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    "Initialize(address,address,address,address,uint256,uint256)"(
      router?: null,
      vault?: null,
      weth?: null,
      usdg?: null,
      minExecutionFee?: null,
      minPurchaseTokenAmountUsd?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        router: string;
        vault: string;
        weth: string;
        usdg: string;
        minExecutionFee: BigNumber;
        minPurchaseTokenAmountUsd: BigNumber;
      }
    >;

    Initialize(
      router?: null,
      vault?: null,
      weth?: null,
      usdg?: null,
      minExecutionFee?: null,
      minPurchaseTokenAmountUsd?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        router: string;
        vault: string;
        weth: string;
        usdg: string;
        minExecutionFee: BigNumber;
        minPurchaseTokenAmountUsd: BigNumber;
      }
    >;

    "UpdateDecreaseOrder(address,uint256,address,uint256,address,uint256,bool,uint256,bool)"(
      account?: string | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean
      ],
      {
        account: string;
        orderIndex: BigNumber;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
      }
    >;

    UpdateDecreaseOrder(
      account?: string | null,
      orderIndex?: null,
      collateralToken?: null,
      collateralDelta?: null,
      indexToken?: null,
      sizeDelta?: null,
      isLong?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        boolean,
        BigNumber,
        boolean
      ],
      {
        account: string;
        orderIndex: BigNumber;
        collateralToken: string;
        collateralDelta: BigNumber;
        indexToken: string;
        sizeDelta: BigNumber;
        isLong: boolean;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
      }
    >;

    "UpdateGov(address)"(
      gov?: null
    ): TypedEventFilter<[string], { gov: string }>;

    UpdateGov(gov?: null): TypedEventFilter<[string], { gov: string }>;

    "UpdateIncreaseOrder(address,uint256,address,address,bool,uint256,uint256,bool)"(
      account?: string | null,
      orderIndex?: null,
      collateralToken?: null,
      indexToken?: null,
      isLong?: null,
      sizeDelta?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        boolean
      ],
      {
        account: string;
        orderIndex: BigNumber;
        collateralToken: string;
        indexToken: string;
        isLong: boolean;
        sizeDelta: BigNumber;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
      }
    >;

    UpdateIncreaseOrder(
      account?: string | null,
      orderIndex?: null,
      collateralToken?: null,
      indexToken?: null,
      isLong?: null,
      sizeDelta?: null,
      triggerPrice?: null,
      triggerAboveThreshold?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        boolean
      ],
      {
        account: string;
        orderIndex: BigNumber;
        collateralToken: string;
        indexToken: string;
        isLong: boolean;
        sizeDelta: BigNumber;
        triggerPrice: BigNumber;
        triggerAboveThreshold: boolean;
      }
    >;

    "UpdateMinExecutionFee(uint256)"(
      minExecutionFee?: null
    ): TypedEventFilter<[BigNumber], { minExecutionFee: BigNumber }>;

    UpdateMinExecutionFee(
      minExecutionFee?: null
    ): TypedEventFilter<[BigNumber], { minExecutionFee: BigNumber }>;

    "UpdateMinPurchaseTokenAmountUsd(uint256)"(
      minPurchaseTokenAmountUsd?: null
    ): TypedEventFilter<[BigNumber], { minPurchaseTokenAmountUsd: BigNumber }>;

    UpdateMinPurchaseTokenAmountUsd(
      minPurchaseTokenAmountUsd?: null
    ): TypedEventFilter<[BigNumber], { minPurchaseTokenAmountUsd: BigNumber }>;

    "UpdateSwapOrder(address,uint256,address[],uint256,uint256,uint256,bool,bool,uint256)"(
      account?: string | null,
      ordexIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ],
      {
        account: string;
        ordexIndex: BigNumber;
        path: string[];
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;

    UpdateSwapOrder(
      account?: string | null,
      ordexIndex?: null,
      path?: null,
      amountIn?: null,
      minOut?: null,
      triggerRatio?: null,
      triggerAboveThreshold?: null,
      shouldUnwrap?: null,
      executionFee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string[],
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber
      ],
      {
        account: string;
        ordexIndex: BigNumber;
        path: string[];
        amountIn: BigNumber;
        minOut: BigNumber;
        triggerRatio: BigNumber;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: BigNumber;
      }
    >;
  };

  estimateGas: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDecreaseOrder(
      _orderIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelIncreaseOrder(
      _orderIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelMultiple(
      _swapOrderIndexes: BigNumberish[],
      _increaseOrderIndexes: BigNumberish[],
      _decreaseOrderIndexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSwapOrder(
      _orderIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDecreaseOrder(
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _collateralToken: string,
      _collateralDelta: BigNumberish,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createIncreaseOrder(
      _path: string[],
      _amountIn: BigNumberish,
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _collateralToken: string,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSwapOrder(
      _path: string[],
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean,
      _shouldUnwrap: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeDecreaseOrder(
      _address: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeIncreaseOrder(
      _address: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDecreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsdgMinPrice(
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    increaseOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _router: string,
      _vault: string,
      _weth: string,
      _usdg: string,
      _minExecutionFee: BigNumberish,
      _minPurchaseTokenAmountUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minPurchaseTokenAmountUsd(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinExecutionFee(
      _minExecutionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPurchaseTokenAmountUsd(
      _minPurchaseTokenAmountUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDecreaseOrder(
      _orderIndex: BigNumberish,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIncreaseOrder(
      _orderIndex: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSwapOrder(
      _orderIndex: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<BigNumber>;

    validatePositionOrderPrice(
      _triggerAboveThreshold: boolean,
      _triggerPrice: BigNumberish,
      _indexToken: string,
      _maximizePrice: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSwapOrderPriceWithTriggerAboveThreshold(
      _path: string[],
      _triggerRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDG_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelDecreaseOrder(
      _orderIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelIncreaseOrder(
      _orderIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelMultiple(
      _swapOrderIndexes: BigNumberish[],
      _increaseOrderIndexes: BigNumberish[],
      _decreaseOrderIndexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSwapOrder(
      _orderIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDecreaseOrder(
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _collateralToken: string,
      _collateralDelta: BigNumberish,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createIncreaseOrder(
      _path: string[],
      _amountIn: BigNumberish,
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _collateralToken: string,
      _isLong: boolean,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSwapOrder(
      _path: string[],
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean,
      _executionFee: BigNumberish,
      _shouldWrap: boolean,
      _shouldUnwrap: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeDecreaseOrder(
      _address: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreaseOrder(
      _address: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDecreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsdgMinPrice(
      _otherToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _router: string,
      _vault: string,
      _weth: string,
      _usdg: string,
      _minExecutionFee: BigNumberish,
      _minPurchaseTokenAmountUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minExecutionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPurchaseTokenAmountUsd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinExecutionFee(
      _minExecutionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPurchaseTokenAmountUsd(
      _minPurchaseTokenAmountUsd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapOrders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOrdersIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateDecreaseOrder(
      _orderIndex: BigNumberish,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIncreaseOrder(
      _orderIndex: BigNumberish,
      _sizeDelta: BigNumberish,
      _triggerPrice: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSwapOrder(
      _orderIndex: BigNumberish,
      _minOut: BigNumberish,
      _triggerRatio: BigNumberish,
      _triggerAboveThreshold: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatePositionOrderPrice(
      _triggerAboveThreshold: boolean,
      _triggerPrice: BigNumberish,
      _indexToken: string,
      _maximizePrice: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateSwapOrderPriceWithTriggerAboveThreshold(
      _path: string[],
      _triggerRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
