/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ZlpManagerInterface extends ethers.utils.Interface {
  functions: {
    "MAX_COOLDOWN_DURATION()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "USDG_DECIMALS()": FunctionFragment;
    "addLiquidity(address,uint256,uint256,uint256)": FunctionFragment;
    "addLiquidityForAccount(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "aumAddition()": FunctionFragment;
    "aumDeduction()": FunctionFragment;
    "cooldownDuration()": FunctionFragment;
    "getAum(bool)": FunctionFragment;
    "getAumInUsdg(bool)": FunctionFragment;
    "getAums()": FunctionFragment;
    "gov()": FunctionFragment;
    "inPrivateMode()": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "lastAddedAt(address)": FunctionFragment;
    "removeLiquidity(address,uint256,uint256,address)": FunctionFragment;
    "removeLiquidityForAccount(address,address,uint256,uint256,address)": FunctionFragment;
    "setAumAdjustment(uint256,uint256)": FunctionFragment;
    "setCooldownDuration(uint256)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setHandler(address,bool)": FunctionFragment;
    "setInPrivateMode(bool)": FunctionFragment;
    "usdg()": FunctionFragment;
    "vault()": FunctionFragment;
    "zlp()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_COOLDOWN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDG_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityForAccount",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "aumAddition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aumDeduction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAum", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "getAumInUsdg",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "getAums", values?: undefined): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inPrivateMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(functionFragment: "lastAddedAt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityForAccount",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAumAdjustment",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInPrivateMode",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "usdg", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "zlp", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_COOLDOWN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDG_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aumAddition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aumDeduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAumInUsdg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAums", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inPrivateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastAddedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAumAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInPrivateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zlp", data: BytesLike): Result;

  events: {
    "AddLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
}

export type AddLiquidityEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    account: string;
    token: string;
    amount: BigNumber;
    aumInUsdg: BigNumber;
    zlpSupply: BigNumber;
    usdgAmount: BigNumber;
    mintAmount: BigNumber;
  }
>;

export type RemoveLiquidityEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    account: string;
    token: string;
    zlpAmount: BigNumber;
    aumInUsdg: BigNumber;
    zlpSupply: BigNumber;
    usdgAmount: BigNumber;
    amountOut: BigNumber;
  }
>;

export class ZlpManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZlpManagerInterface;

  functions: {
    MAX_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minZlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityForAccount(
      _fundingAccount: string,
      _account: string,
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minZlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aumAddition(overrides?: CallOverrides): Promise<[BigNumber]>;

    aumDeduction(overrides?: CallOverrides): Promise<[BigNumber]>;

    cooldownDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAum(maximise: boolean, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAumInUsdg(
      maximise: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAums(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    inPrivateMode(overrides?: CallOverrides): Promise<[boolean]>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastAddedAt(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    removeLiquidity(
      _tokenOut: string,
      _zlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityForAccount(
      _account: string,
      _tokenOut: string,
      _zlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAumAdjustment(
      _aumAddition: BigNumberish,
      _aumDeduction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCooldownDuration(
      _cooldownDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInPrivateMode(
      _inPrivateMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdg(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    zlp(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidity(
    _token: string,
    _amount: BigNumberish,
    _minUsdg: BigNumberish,
    _minZlp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityForAccount(
    _fundingAccount: string,
    _account: string,
    _token: string,
    _amount: BigNumberish,
    _minUsdg: BigNumberish,
    _minZlp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aumAddition(overrides?: CallOverrides): Promise<BigNumber>;

  aumDeduction(overrides?: CallOverrides): Promise<BigNumber>;

  cooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getAum(maximise: boolean, overrides?: CallOverrides): Promise<BigNumber>;

  getAumInUsdg(
    maximise: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAums(overrides?: CallOverrides): Promise<BigNumber[]>;

  gov(overrides?: CallOverrides): Promise<string>;

  inPrivateMode(overrides?: CallOverrides): Promise<boolean>;

  isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  lastAddedAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  removeLiquidity(
    _tokenOut: string,
    _zlpAmount: BigNumberish,
    _minOut: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityForAccount(
    _account: string,
    _tokenOut: string,
    _zlpAmount: BigNumberish,
    _minOut: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAumAdjustment(
    _aumAddition: BigNumberish,
    _aumDeduction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCooldownDuration(
    _cooldownDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHandler(
    _handler: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInPrivateMode(
    _inPrivateMode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdg(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  zlp(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minZlp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityForAccount(
      _fundingAccount: string,
      _account: string,
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minZlp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aumAddition(overrides?: CallOverrides): Promise<BigNumber>;

    aumDeduction(overrides?: CallOverrides): Promise<BigNumber>;

    cooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getAum(maximise: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    getAumInUsdg(
      maximise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAums(overrides?: CallOverrides): Promise<BigNumber[]>;

    gov(overrides?: CallOverrides): Promise<string>;

    inPrivateMode(overrides?: CallOverrides): Promise<boolean>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    lastAddedAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _tokenOut: string,
      _zlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityForAccount(
      _account: string,
      _tokenOut: string,
      _zlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAumAdjustment(
      _aumAddition: BigNumberish,
      _aumDeduction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCooldownDuration(
      _cooldownDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setInPrivateMode(
      _inPrivateMode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    usdg(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    zlp(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      account?: null,
      token?: null,
      amount?: null,
      aumInUsdg?: null,
      zlpSupply?: null,
      usdgAmount?: null,
      mintAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        token: string;
        amount: BigNumber;
        aumInUsdg: BigNumber;
        zlpSupply: BigNumber;
        usdgAmount: BigNumber;
        mintAmount: BigNumber;
      }
    >;

    AddLiquidity(
      account?: null,
      token?: null,
      amount?: null,
      aumInUsdg?: null,
      zlpSupply?: null,
      usdgAmount?: null,
      mintAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        token: string;
        amount: BigNumber;
        aumInUsdg: BigNumber;
        zlpSupply: BigNumber;
        usdgAmount: BigNumber;
        mintAmount: BigNumber;
      }
    >;

    "RemoveLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      account?: null,
      token?: null,
      zlpAmount?: null,
      aumInUsdg?: null,
      zlpSupply?: null,
      usdgAmount?: null,
      amountOut?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        token: string;
        zlpAmount: BigNumber;
        aumInUsdg: BigNumber;
        zlpSupply: BigNumber;
        usdgAmount: BigNumber;
        amountOut: BigNumber;
      }
    >;

    RemoveLiquidity(
      account?: null,
      token?: null,
      zlpAmount?: null,
      aumInUsdg?: null,
      zlpSupply?: null,
      usdgAmount?: null,
      amountOut?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        token: string;
        zlpAmount: BigNumber;
        aumInUsdg: BigNumber;
        zlpSupply: BigNumber;
        usdgAmount: BigNumber;
        amountOut: BigNumber;
      }
    >;
  };

  estimateGas: {
    MAX_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minZlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityForAccount(
      _fundingAccount: string,
      _account: string,
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minZlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aumAddition(overrides?: CallOverrides): Promise<BigNumber>;

    aumDeduction(overrides?: CallOverrides): Promise<BigNumber>;

    cooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getAum(maximise: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    getAumInUsdg(
      maximise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAums(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    inPrivateMode(overrides?: CallOverrides): Promise<BigNumber>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastAddedAt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _tokenOut: string,
      _zlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityForAccount(
      _account: string,
      _tokenOut: string,
      _zlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAumAdjustment(
      _aumAddition: BigNumberish,
      _aumDeduction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCooldownDuration(
      _cooldownDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInPrivateMode(
      _inPrivateMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    zlp(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_COOLDOWN_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDG_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minZlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityForAccount(
      _fundingAccount: string,
      _account: string,
      _token: string,
      _amount: BigNumberish,
      _minUsdg: BigNumberish,
      _minZlp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aumAddition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aumDeduction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cooldownDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAum(
      maximise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAumInUsdg(
      maximise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAums(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inPrivateMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isHandler(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastAddedAt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _tokenOut: string,
      _zlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityForAccount(
      _account: string,
      _tokenOut: string,
      _zlpAmount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAumAdjustment(
      _aumAddition: BigNumberish,
      _aumDeduction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCooldownDuration(
      _cooldownDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInPrivateMode(
      _inPrivateMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zlp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
