/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IVaultPriceFeedInterface extends ethers.utils.Interface {
  functions: {
    "adjustmentBasisPoints(address)": FunctionFragment;
    "getAmmPrice(address)": FunctionFragment;
    "getLatestPrimaryPrice(address)": FunctionFragment;
    "getPrice(address,bool,bool,bool)": FunctionFragment;
    "getPrimaryPrice(address,bool)": FunctionFragment;
    "isAdjustmentAdditive(address)": FunctionFragment;
    "setAdjustment(address,bool,uint256)": FunctionFragment;
    "setFavorPrimaryPrice(bool)": FunctionFragment;
    "setIsAmmEnabled(bool)": FunctionFragment;
    "setIsSecondaryPriceEnabled(bool)": FunctionFragment;
    "setMaxStrictPriceDeviation(uint256)": FunctionFragment;
    "setPriceSampleSpace(uint256)": FunctionFragment;
    "setSpreadBasisPoints(address,uint256)": FunctionFragment;
    "setSpreadThresholdBasisPoints(uint256)": FunctionFragment;
    "setTokenConfig(address,address,uint256,bool)": FunctionFragment;
    "setUseV2Pricing(bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adjustmentBasisPoints",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getAmmPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getLatestPrimaryPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryPrice",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdjustmentAdditive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFavorPrimaryPrice",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAmmEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSecondaryPriceEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStrictPriceDeviation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceSampleSpace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadThresholdBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseV2Pricing",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustmentBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmmPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAdjustmentAdditive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFavorPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsAmmEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSecondaryPriceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStrictPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceSampleSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadThresholdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseV2Pricing",
    data: BytesLike
  ): Result;

  events: {};
}

export class IVaultPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVaultPriceFeedInterface;

  functions: {
    adjustmentBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmmPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLatestPrimaryPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _token: string,
      _maximise: boolean,
      _includeAmmPrice: boolean,
      _useSwapPricing: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrimaryPrice(
      _token: string,
      _maximise: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAdjustmentAdditive(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAdjustment(
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsAmmEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsSecondaryPriceEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceSampleSpace(
      _priceSampleSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPoints(
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenConfig(
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUseV2Pricing(
      _useV2Pricing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  adjustmentBasisPoints(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmmPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLatestPrimaryPrice(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    _token: string,
    _maximise: boolean,
    _includeAmmPrice: boolean,
    _useSwapPricing: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrimaryPrice(
    _token: string,
    _maximise: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAdjustmentAdditive(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAdjustment(
    _token: string,
    _isAdditive: boolean,
    _adjustmentBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFavorPrimaryPrice(
    _favorPrimaryPrice: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsAmmEnabled(
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsSecondaryPriceEnabled(
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxStrictPriceDeviation(
    _maxStrictPriceDeviation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceSampleSpace(
    _priceSampleSpace: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPoints(
    _token: string,
    _spreadBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpreadThresholdBasisPoints(
    _spreadThresholdBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenConfig(
    _token: string,
    _priceFeed: string,
    _priceDecimals: BigNumberish,
    _isStrictStable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUseV2Pricing(
    _useV2Pricing: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustmentBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmmPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPrimaryPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: string,
      _maximise: boolean,
      _includeAmmPrice: boolean,
      _useSwapPricing: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryPrice(
      _token: string,
      _maximise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdjustmentAdditive(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAdjustment(
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsAmmEnabled(
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSecondaryPriceEnabled(
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceSampleSpace(
      _priceSampleSpace: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPoints(
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenConfig(
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUseV2Pricing(
      _useV2Pricing: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    adjustmentBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmmPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPrimaryPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: string,
      _maximise: boolean,
      _includeAmmPrice: boolean,
      _useSwapPricing: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryPrice(
      _token: string,
      _maximise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdjustmentAdditive(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdjustment(
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsAmmEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsSecondaryPriceEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceSampleSpace(
      _priceSampleSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPoints(
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenConfig(
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUseV2Pricing(
      _useV2Pricing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustmentBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmmPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestPrimaryPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _token: string,
      _maximise: boolean,
      _includeAmmPrice: boolean,
      _useSwapPricing: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimaryPrice(
      _token: string,
      _maximise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdjustmentAdditive(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdjustment(
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsAmmEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsSecondaryPriceEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceSampleSpace(
      _priceSampleSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPoints(
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUseV2Pricing(
      _useV2Pricing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
