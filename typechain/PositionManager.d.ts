/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PositionManagerInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "decreasePosition(address,address,uint256,uint256,bool,address,uint256)": FunctionFragment;
    "decreasePositionAndSwap(address[],address,uint256,uint256,bool,address,uint256,uint256)": FunctionFragment;
    "decreasePositionAndSwapETH(address[],address,uint256,uint256,bool,address,uint256,uint256)": FunctionFragment;
    "decreasePositionETH(address,address,uint256,uint256,bool,address,uint256)": FunctionFragment;
    "depositFee()": FunctionFragment;
    "executeDecreaseOrder(address,uint256,address)": FunctionFragment;
    "executeIncreaseOrder(address,uint256,address)": FunctionFragment;
    "executeSwapOrder(address,uint256,address)": FunctionFragment;
    "feeReserves(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "inLegacyMode()": FunctionFragment;
    "increasePosition(address[],address,uint256,uint256,uint256,bool,uint256)": FunctionFragment;
    "increasePositionBufferBps()": FunctionFragment;
    "increasePositionETH(address[],address,uint256,uint256,bool,uint256)": FunctionFragment;
    "isLiquidator(address)": FunctionFragment;
    "isOrderKeeper(address)": FunctionFragment;
    "isPartner(address)": FunctionFragment;
    "liquidatePosition(address,address,address,bool,address)": FunctionFragment;
    "maxGlobalLongSizes(address)": FunctionFragment;
    "maxGlobalShortSizes(address)": FunctionFragment;
    "orderBook()": FunctionFragment;
    "referralStorage()": FunctionFragment;
    "router()": FunctionFragment;
    "sendValue(address,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setDepositFee(uint256)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setInLegacyMode(bool)": FunctionFragment;
    "setIncreasePositionBufferBps(uint256)": FunctionFragment;
    "setLiquidator(address,bool)": FunctionFragment;
    "setMaxGlobalSizes(address[],uint256[],uint256[])": FunctionFragment;
    "setOrderKeeper(address,bool)": FunctionFragment;
    "setPartner(address,bool)": FunctionFragment;
    "setReferralStorage(address)": FunctionFragment;
    "setShouldValidateIncreaseOrder(bool)": FunctionFragment;
    "shortsTracker()": FunctionFragment;
    "shouldValidateIncreaseOrder()": FunctionFragment;
    "vault()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawFees(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionAndSwap",
    values: [
      string[],
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionAndSwapETH",
    values: [
      string[],
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionETH",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "feeReserves", values: [string]): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inLegacyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [
      string[],
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionBufferBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionETH",
    values: [
      string[],
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOrderKeeper",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isPartner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [string, string, string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalLongSizes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalShortSizes",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "orderBook", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setInLegacyMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncreasePositionBufferBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalSizes",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderKeeper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartner",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldValidateIncreaseOrder",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shortsTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldValidateIncreaseOrder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionAndSwapETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inLegacyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOrderKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPartner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalLongSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInLegacyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncreasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPartner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShouldValidateIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortsTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldValidateIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)": EventFragment;
    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)": EventFragment;
    "SetAdmin(address)": EventFragment;
    "SetDepositFee(uint256)": EventFragment;
    "SetInLegacyMode(bool)": EventFragment;
    "SetIncreasePositionBufferBps(uint256)": EventFragment;
    "SetLiquidator(address,bool)": EventFragment;
    "SetMaxGlobalSizes(address[],uint256[],uint256[])": EventFragment;
    "SetOrderKeeper(address,bool)": EventFragment;
    "SetPartner(address,bool)": EventFragment;
    "SetReferralStorage(address)": EventFragment;
    "SetShouldValidateIncreaseOrder(bool)": EventFragment;
    "WithdrawFees(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecreasePositionReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePositionReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInLegacyMode"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetIncreasePositionBufferBps"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxGlobalSizes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOrderKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPartner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferralStorage"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetShouldValidateIncreaseOrder"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
}

export type DecreasePositionReferralEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string] & {
    account: string;
    sizeDelta: BigNumber;
    marginFeeBasisPoints: BigNumber;
    referralCode: string;
    referrer: string;
  }
>;

export type IncreasePositionReferralEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string] & {
    account: string;
    sizeDelta: BigNumber;
    marginFeeBasisPoints: BigNumber;
    referralCode: string;
    referrer: string;
  }
>;

export type SetAdminEvent = TypedEvent<[string] & { admin: string }>;

export type SetDepositFeeEvent = TypedEvent<
  [BigNumber] & { depositFee: BigNumber }
>;

export type SetInLegacyModeEvent = TypedEvent<
  [boolean] & { inLegacyMode: boolean }
>;

export type SetIncreasePositionBufferBpsEvent = TypedEvent<
  [BigNumber] & { increasePositionBufferBps: BigNumber }
>;

export type SetLiquidatorEvent = TypedEvent<
  [string, boolean] & { account: string; isActive: boolean }
>;

export type SetMaxGlobalSizesEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]] & {
    tokens: string[];
    longSizes: BigNumber[];
    shortSizes: BigNumber[];
  }
>;

export type SetOrderKeeperEvent = TypedEvent<
  [string, boolean] & { account: string; isActive: boolean }
>;

export type SetPartnerEvent = TypedEvent<
  [string, boolean] & { account: string; isActive: boolean }
>;

export type SetReferralStorageEvent = TypedEvent<
  [string] & { referralStorage: string }
>;

export type SetShouldValidateIncreaseOrderEvent = TypedEvent<
  [boolean] & { shouldValidateIncreaseOrder: boolean }
>;

export type WithdrawFeesEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    receiver: string;
    amount: BigNumber;
  }
>;

export class PositionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PositionManagerInterface;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePosition(
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePositionAndSwap(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      _minOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePositionAndSwapETH(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      _minOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePositionETH(
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeDecreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeIncreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeReserves(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    inLegacyMode(overrides?: CallOverrides): Promise<[boolean]>;

    increasePosition(
      _path: string[],
      _indexToken: string,
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    increasePositionETH(
      _path: string[],
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLiquidator(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOrderKeeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPartner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxGlobalLongSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxGlobalShortSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orderBook(overrides?: CallOverrides): Promise<[string]>;

    referralStorage(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sendValue(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositFee(
      _depositFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInLegacyMode(
      _inLegacyMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidator(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxGlobalSizes(
      _tokens: string[],
      _longSizes: BigNumberish[],
      _shortSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOrderKeeper(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPartner(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferralStorage(
      _referralStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setShouldValidateIncreaseOrder(
      _shouldValidateIncreaseOrder: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortsTracker(overrides?: CallOverrides): Promise<[string]>;

    shouldValidateIncreaseOrder(overrides?: CallOverrides): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePosition(
    _collateralToken: string,
    _indexToken: string,
    _collateralDelta: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _receiver: string,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePositionAndSwap(
    _path: string[],
    _indexToken: string,
    _collateralDelta: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _receiver: string,
    _price: BigNumberish,
    _minOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePositionAndSwapETH(
    _path: string[],
    _indexToken: string,
    _collateralDelta: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _receiver: string,
    _price: BigNumberish,
    _minOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePositionETH(
    _collateralToken: string,
    _indexToken: string,
    _collateralDelta: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _receiver: string,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  executeDecreaseOrder(
    _account: string,
    _orderIndex: BigNumberish,
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeIncreaseOrder(
    _account: string,
    _orderIndex: BigNumberish,
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSwapOrder(
    _account: string,
    _orderIndex: BigNumberish,
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeReserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  inLegacyMode(overrides?: CallOverrides): Promise<boolean>;

  increasePosition(
    _path: string[],
    _indexToken: string,
    _amountIn: BigNumberish,
    _minOut: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

  increasePositionETH(
    _path: string[],
    _indexToken: string,
    _minOut: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLiquidator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isOrderKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isPartner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  liquidatePosition(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxGlobalLongSizes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxGlobalShortSizes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orderBook(overrides?: CallOverrides): Promise<string>;

  referralStorage(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  sendValue(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositFee(
    _depositFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInLegacyMode(
    _inLegacyMode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIncreasePositionBufferBps(
    _increasePositionBufferBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidator(
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxGlobalSizes(
    _tokens: string[],
    _longSizes: BigNumberish[],
    _shortSizes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOrderKeeper(
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPartner(
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferralStorage(
    _referralStorage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setShouldValidateIncreaseOrder(
    _shouldValidateIncreaseOrder: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortsTracker(overrides?: CallOverrides): Promise<string>;

  shouldValidateIncreaseOrder(overrides?: CallOverrides): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawFees(
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePosition(
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePositionAndSwap(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      _minOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePositionAndSwapETH(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      _minOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePositionETH(
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    executeDecreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executeIncreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executeSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    feeReserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    inLegacyMode(overrides?: CallOverrides): Promise<boolean>;

    increasePosition(
      _path: string[],
      _indexToken: string,
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionETH(
      _path: string[],
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isLiquidator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isOrderKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isPartner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxGlobalLongSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderBook(overrides?: CallOverrides): Promise<string>;

    referralStorage(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    sendValue(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setDepositFee(
      _depositFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setInLegacyMode(
      _inLegacyMode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidator(
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGlobalSizes(
      _tokens: string[],
      _longSizes: BigNumberish[],
      _shortSizes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setOrderKeeper(
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartner(
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralStorage(
      _referralStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setShouldValidateIncreaseOrder(
      _shouldValidateIncreaseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    shortsTracker(overrides?: CallOverrides): Promise<string>;

    shouldValidateIncreaseOrder(overrides?: CallOverrides): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)"(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        account: string;
        sizeDelta: BigNumber;
        marginFeeBasisPoints: BigNumber;
        referralCode: string;
        referrer: string;
      }
    >;

    DecreasePositionReferral(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        account: string;
        sizeDelta: BigNumber;
        marginFeeBasisPoints: BigNumber;
        referralCode: string;
        referrer: string;
      }
    >;

    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)"(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        account: string;
        sizeDelta: BigNumber;
        marginFeeBasisPoints: BigNumber;
        referralCode: string;
        referrer: string;
      }
    >;

    IncreasePositionReferral(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        account: string;
        sizeDelta: BigNumber;
        marginFeeBasisPoints: BigNumber;
        referralCode: string;
        referrer: string;
      }
    >;

    "SetAdmin(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    SetAdmin(admin?: null): TypedEventFilter<[string], { admin: string }>;

    "SetDepositFee(uint256)"(
      depositFee?: null
    ): TypedEventFilter<[BigNumber], { depositFee: BigNumber }>;

    SetDepositFee(
      depositFee?: null
    ): TypedEventFilter<[BigNumber], { depositFee: BigNumber }>;

    "SetInLegacyMode(bool)"(
      inLegacyMode?: null
    ): TypedEventFilter<[boolean], { inLegacyMode: boolean }>;

    SetInLegacyMode(
      inLegacyMode?: null
    ): TypedEventFilter<[boolean], { inLegacyMode: boolean }>;

    "SetIncreasePositionBufferBps(uint256)"(
      increasePositionBufferBps?: null
    ): TypedEventFilter<[BigNumber], { increasePositionBufferBps: BigNumber }>;

    SetIncreasePositionBufferBps(
      increasePositionBufferBps?: null
    ): TypedEventFilter<[BigNumber], { increasePositionBufferBps: BigNumber }>;

    "SetLiquidator(address,bool)"(
      account?: string | null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isActive: boolean }
    >;

    SetLiquidator(
      account?: string | null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isActive: boolean }
    >;

    "SetMaxGlobalSizes(address[],uint256[],uint256[])"(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { tokens: string[]; longSizes: BigNumber[]; shortSizes: BigNumber[] }
    >;

    SetMaxGlobalSizes(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { tokens: string[]; longSizes: BigNumber[]; shortSizes: BigNumber[] }
    >;

    "SetOrderKeeper(address,bool)"(
      account?: string | null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isActive: boolean }
    >;

    SetOrderKeeper(
      account?: string | null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isActive: boolean }
    >;

    "SetPartner(address,bool)"(
      account?: null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isActive: boolean }
    >;

    SetPartner(
      account?: null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isActive: boolean }
    >;

    "SetReferralStorage(address)"(
      referralStorage?: null
    ): TypedEventFilter<[string], { referralStorage: string }>;

    SetReferralStorage(
      referralStorage?: null
    ): TypedEventFilter<[string], { referralStorage: string }>;

    "SetShouldValidateIncreaseOrder(bool)"(
      shouldValidateIncreaseOrder?: null
    ): TypedEventFilter<[boolean], { shouldValidateIncreaseOrder: boolean }>;

    SetShouldValidateIncreaseOrder(
      shouldValidateIncreaseOrder?: null
    ): TypedEventFilter<[boolean], { shouldValidateIncreaseOrder: boolean }>;

    "WithdrawFees(address,address,uint256)"(
      token?: null,
      receiver?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; receiver: string; amount: BigNumber }
    >;

    WithdrawFees(
      token?: null,
      receiver?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; receiver: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePosition(
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePositionAndSwap(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      _minOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePositionAndSwapETH(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      _minOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePositionETH(
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    executeDecreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeIncreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeReserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    inLegacyMode(overrides?: CallOverrides): Promise<BigNumber>;

    increasePosition(
      _path: string[],
      _indexToken: string,
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionETH(
      _path: string[],
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLiquidator(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOrderKeeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPartner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxGlobalLongSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderBook(overrides?: CallOverrides): Promise<BigNumber>;

    referralStorage(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sendValue(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositFee(
      _depositFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInLegacyMode(
      _inLegacyMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidator(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxGlobalSizes(
      _tokens: string[],
      _longSizes: BigNumberish[],
      _shortSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOrderKeeper(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPartner(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferralStorage(
      _referralStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setShouldValidateIncreaseOrder(
      _shouldValidateIncreaseOrder: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortsTracker(overrides?: CallOverrides): Promise<BigNumber>;

    shouldValidateIncreaseOrder(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePosition(
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositionAndSwap(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      _minOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositionAndSwapETH(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      _minOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositionETH(
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeDecreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreaseOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSwapOrder(
      _account: string,
      _orderIndex: BigNumberish,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeReserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inLegacyMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePosition(
      _path: string[],
      _indexToken: string,
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increasePositionBufferBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionETH(
      _path: string[],
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLiquidator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOrderKeeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxGlobalLongSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGlobalShortSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendValue(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      _depositFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInLegacyMode(
      _inLegacyMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidator(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGlobalSizes(
      _tokens: string[],
      _longSizes: BigNumberish[],
      _shortSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOrderKeeper(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPartner(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferralStorage(
      _referralStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setShouldValidateIncreaseOrder(
      _shouldValidateIncreaseOrder: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortsTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shouldValidateIncreaseOrder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
