/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ZomiMigratorInterface extends ethers.utils.Interface {
  functions: {
    "actionsNonce()": FunctionFragment;
    "admin()": FunctionFragment;
    "ammRouter()": FunctionFragment;
    "approve(address,address,uint256,uint256)": FunctionFragment;
    "caps(address)": FunctionFragment;
    "endMigration()": FunctionFragment;
    "getIouToken(address)": FunctionFragment;
    "getTokenAmounts(address[])": FunctionFragment;
    "getTokenPrice(address)": FunctionFragment;
    "hasMaxMigrationLimit()": FunctionFragment;
    "initialize(address,uint256,address[],address[],address[],uint256[],uint256[],address[],address[],address[])": FunctionFragment;
    "iouTokens(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isMigrationActive()": FunctionFragment;
    "isSigner(address)": FunctionFragment;
    "lpTokenAs(address)": FunctionFragment;
    "lpTokenBs(address)": FunctionFragment;
    "lpTokens(address)": FunctionFragment;
    "maxMigrationAmounts(address,address)": FunctionFragment;
    "migrate(address,uint256)": FunctionFragment;
    "migratedAmounts(address,address)": FunctionFragment;
    "minAuthorizations()": FunctionFragment;
    "pendingActions(bytes32)": FunctionFragment;
    "prices(address)": FunctionFragment;
    "setHasMaxMigrationLimit(bool)": FunctionFragment;
    "setMaxMigrationAmount(address,address,uint256)": FunctionFragment;
    "signApprove(address,address,uint256,uint256)": FunctionFragment;
    "signalApprove(address,address,uint256)": FunctionFragment;
    "signedActions(address,bytes32)": FunctionFragment;
    "signers(uint256)": FunctionFragment;
    "tokenAmounts(address)": FunctionFragment;
    "whitelistedTokens(address)": FunctionFragment;
    "zomiPrice()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "actionsNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "ammRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "caps", values: [string]): string;
  encodeFunctionData(
    functionFragment: "endMigration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getIouToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTokenAmounts",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMaxMigrationLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      string[],
      string[],
      string[],
      BigNumberish[],
      BigNumberish[],
      string[],
      string[],
      string[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "iouTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMigrationActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isSigner", values: [string]): string;
  encodeFunctionData(functionFragment: "lpTokenAs", values: [string]): string;
  encodeFunctionData(functionFragment: "lpTokenBs", values: [string]): string;
  encodeFunctionData(functionFragment: "lpTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxMigrationAmounts",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migratedAmounts",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minAuthorizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "prices", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setHasMaxMigrationLimit",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMigrationAmount",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signApprove",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApprove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signedActions",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "zomiPrice", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "actionsNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ammRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "caps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIouToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMaxMigrationLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iouTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMigrationActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpTokenAs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpTokenBs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxMigrationAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migratedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuthorizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHasMaxMigrationLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMigrationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signedActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zomiPrice", data: BytesLike): Result;

  events: {
    "ClearAction(bytes32,uint256)": EventFragment;
    "SignAction(bytes32,uint256)": EventFragment;
    "SignalApprove(address,address,uint256,bytes32,uint256)": EventFragment;
    "SignalPendingAction(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalPendingAction"): EventFragment;
}

export type ClearActionEvent = TypedEvent<
  [string, BigNumber] & { action: string; nonce: BigNumber }
>;

export type SignActionEvent = TypedEvent<
  [string, BigNumber] & { action: string; nonce: BigNumber }
>;

export type SignalApproveEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    token: string;
    spender: string;
    amount: BigNumber;
    action: string;
    nonce: BigNumber;
  }
>;

export type SignalPendingActionEvent = TypedEvent<
  [string, BigNumber] & { action: string; nonce: BigNumber }
>;

export class ZomiMigrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZomiMigratorInterface;

  functions: {
    actionsNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    ammRouter(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    caps(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    endMigration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIouToken(_token: string, overrides?: CallOverrides): Promise<[string]>;

    getTokenAmounts(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTokenPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasMaxMigrationLimit(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _ammRouter: string,
      _zomiPrice: BigNumberish,
      _signers: string[],
      _whitelistedTokens: string[],
      _iouTokens: string[],
      _prices: BigNumberish[],
      _caps: BigNumberish[],
      _lpTokens: string[],
      _lpTokenAs: string[],
      _lpTokenBs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    iouTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isMigrationActive(overrides?: CallOverrides): Promise<[boolean]>;

    isSigner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    lpTokenAs(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    lpTokenBs(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    lpTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    maxMigrationAmounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    migrate(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migratedAmounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minAuthorizations(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    prices(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setHasMaxMigrationLimit(
      _hasMaxMigrationLimit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxMigrationAmount(
      _account: string,
      _token: string,
      _maxMigrationAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signedActions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    tokenAmounts(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    zomiPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  ammRouter(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  caps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  endMigration(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIouToken(_token: string, overrides?: CallOverrides): Promise<string>;

  getTokenAmounts(
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTokenPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  hasMaxMigrationLimit(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _ammRouter: string,
    _zomiPrice: BigNumberish,
    _signers: string[],
    _whitelistedTokens: string[],
    _iouTokens: string[],
    _prices: BigNumberish[],
    _caps: BigNumberish[],
    _lpTokens: string[],
    _lpTokenAs: string[],
    _lpTokenBs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  iouTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isMigrationActive(overrides?: CallOverrides): Promise<boolean>;

  isSigner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  lpTokenAs(arg0: string, overrides?: CallOverrides): Promise<string>;

  lpTokenBs(arg0: string, overrides?: CallOverrides): Promise<string>;

  lpTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  maxMigrationAmounts(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  migrate(
    _token: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migratedAmounts(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

  pendingActions(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setHasMaxMigrationLimit(
    _hasMaxMigrationLimit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxMigrationAmount(
    _account: string,
    _token: string,
    _maxMigrationAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signApprove(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalApprove(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signedActions(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  whitelistedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  zomiPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    ammRouter(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    caps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    endMigration(overrides?: CallOverrides): Promise<void>;

    getIouToken(_token: string, overrides?: CallOverrides): Promise<string>;

    getTokenAmounts(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTokenPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMaxMigrationLimit(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _ammRouter: string,
      _zomiPrice: BigNumberish,
      _signers: string[],
      _whitelistedTokens: string[],
      _iouTokens: string[],
      _prices: BigNumberish[],
      _caps: BigNumberish[],
      _lpTokens: string[],
      _lpTokenAs: string[],
      _lpTokenBs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    iouTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isMigrationActive(overrides?: CallOverrides): Promise<boolean>;

    isSigner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    lpTokenAs(arg0: string, overrides?: CallOverrides): Promise<string>;

    lpTokenBs(arg0: string, overrides?: CallOverrides): Promise<string>;

    lpTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    maxMigrationAmounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migratedAmounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setHasMaxMigrationLimit(
      _hasMaxMigrationLimit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMigrationAmount(
      _account: string,
      _token: string,
      _maxMigrationAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signedActions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    zomiPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ClearAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    ClearAction(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    "SignAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    SignAction(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    "SignalApprove(address,address,uint256,bytes32,uint256)"(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        token: string;
        spender: string;
        amount: BigNumber;
        action: string;
        nonce: BigNumber;
      }
    >;

    SignalApprove(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        token: string;
        spender: string;
        amount: BigNumber;
        action: string;
        nonce: BigNumber;
      }
    >;

    "SignalPendingAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    SignalPendingAction(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;
  };

  estimateGas: {
    actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    ammRouter(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    caps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    endMigration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIouToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAmounts(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMaxMigrationLimit(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ammRouter: string,
      _zomiPrice: BigNumberish,
      _signers: string[],
      _whitelistedTokens: string[],
      _iouTokens: string[],
      _prices: BigNumberish[],
      _caps: BigNumberish[],
      _lpTokens: string[],
      _lpTokenAs: string[],
      _lpTokenBs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    iouTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isMigrationActive(overrides?: CallOverrides): Promise<BigNumber>;

    isSigner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lpTokenAs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lpTokenBs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lpTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMigrationAmounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migratedAmounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setHasMaxMigrationLimit(
      _hasMaxMigrationLimit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxMigrationAmount(
      _account: string,
      _token: string,
      _maxMigrationAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signedActions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenAmounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zomiPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    actionsNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ammRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    caps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endMigration(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIouToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAmounts(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMaxMigrationLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _ammRouter: string,
      _zomiPrice: BigNumberish,
      _signers: string[],
      _whitelistedTokens: string[],
      _iouTokens: string[],
      _prices: BigNumberish[],
      _caps: BigNumberish[],
      _lpTokens: string[],
      _lpTokenAs: string[],
      _lpTokenBs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    iouTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMigrationActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSigner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTokenAs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTokenBs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMigrationAmounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migratedAmounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuthorizations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setHasMaxMigrationLimit(
      _hasMaxMigrationLimit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxMigrationAmount(
      _account: string,
      _token: string,
      _maxMigrationAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signedActions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAmounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zomiPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
