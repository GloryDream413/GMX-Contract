/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TimelockInterface extends ethers.utils.Interface {
  functions: {
    "MAX_BUFFER()": FunctionFragment;
    "MAX_FUNDING_RATE_FACTOR()": FunctionFragment;
    "MAX_LEVERAGE_VALIDATION()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "batchSetBonusRewards(address,address[],uint256[])": FunctionFragment;
    "batchWithdrawFees(address,address[])": FunctionFragment;
    "buffer()": FunctionFragment;
    "cancelAction(bytes32)": FunctionFragment;
    "disableLeverage(address)": FunctionFragment;
    "enableLeverage(address)": FunctionFragment;
    "govSetCodeOwner(address,bytes32,address)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "isKeeper(address)": FunctionFragment;
    "marginFeeBasisPoints()": FunctionFragment;
    "maxMarginFeeBasisPoints()": FunctionFragment;
    "maxTokenSupply()": FunctionFragment;
    "mintReceiver()": FunctionFragment;
    "pendingActions(bytes32)": FunctionFragment;
    "processMint(address,address,uint256)": FunctionFragment;
    "redeemUsdg(address,address,uint256)": FunctionFragment;
    "removeAdmin(address,address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBuffer(uint256)": FunctionFragment;
    "setContractHandler(address,bool)": FunctionFragment;
    "setExternalAdmin(address,address)": FunctionFragment;
    "setFees(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "setFundingRate(address,uint256,uint256,uint256)": FunctionFragment;
    "setGov(address,address)": FunctionFragment;
    "setHandler(address,address,bool)": FunctionFragment;
    "setInPrivateLiquidationMode(address,bool)": FunctionFragment;
    "setInPrivateTransferMode(address,bool)": FunctionFragment;
    "setIsLeverageEnabled(address,bool)": FunctionFragment;
    "setIsSwapEnabled(address,bool)": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setLiquidator(address,address,bool)": FunctionFragment;
    "setMarginFeeBasisPoints(uint256,uint256)": FunctionFragment;
    "setMaxGasPrice(address,uint256)": FunctionFragment;
    "setMaxGlobalShortSize(address,address,uint256)": FunctionFragment;
    "setMaxLeverage(address,uint256)": FunctionFragment;
    "setPriceFeed(address,address)": FunctionFragment;
    "setReferrerTier(address,address,uint256)": FunctionFragment;
    "setShortsTrackerAveragePriceWeight(uint256)": FunctionFragment;
    "setShouldToggleIsLeverageEnabled(bool)": FunctionFragment;
    "setSwapFees(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setTier(address,uint256,uint256,uint256)": FunctionFragment;
    "setTokenConfig(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setUsdgAmounts(address,address[],uint256[])": FunctionFragment;
    "setVaultUtils(address,address)": FunctionFragment;
    "setZlpCooldownDuration(uint256)": FunctionFragment;
    "shouldToggleIsLeverageEnabled()": FunctionFragment;
    "signalApprove(address,address,uint256)": FunctionFragment;
    "signalMint(address,address,uint256)": FunctionFragment;
    "signalRedeemUsdg(address,address,uint256)": FunctionFragment;
    "signalSetGov(address,address)": FunctionFragment;
    "signalSetHandler(address,address,bool)": FunctionFragment;
    "signalSetPriceFeed(address,address)": FunctionFragment;
    "signalVaultSetTokenConfig(address,address,uint256,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "signalWithdrawToken(address,address,address,uint256)": FunctionFragment;
    "tokenManager()": FunctionFragment;
    "transferIn(address,address,uint256)": FunctionFragment;
    "updateUsdgSupply(uint256)": FunctionFragment;
    "vaultSetTokenConfig(address,address,uint256,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "withdrawFees(address,address,address)": FunctionFragment;
    "withdrawToken(address,address,address,uint256)": FunctionFragment;
    "zlpManager()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_BUFFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FUNDING_RATE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LEVERAGE_VALIDATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetBonusRewards",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdrawFees",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "buffer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelAction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableLeverage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableLeverage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "govSetCodeOwner",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(functionFragment: "isKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "marginFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMarginFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processMint",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUsdg",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRate",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInPrivateLiquidationMode",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInPrivateTransferMode",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLeverageEnabled",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSwapEnabled",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidator",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginFeeBasisPoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalShortSize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLeverage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrerTier",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShortsTrackerAveragePriceWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldToggleIsLeverageEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFees",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTier",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdgAmounts",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultUtils",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setZlpCooldownDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldToggleIsLeverageEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signalApprove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalMint",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalRedeemUsdg",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetGov",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetHandler",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetPriceFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "signalVaultSetTokenConfig",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalWithdrawToken",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferIn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUsdgSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultSetTokenConfig",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zlpManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_BUFFER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FUNDING_RATE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LEVERAGE_VALIDATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchSetBonusRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govSetCodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marginFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMarginFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemUsdg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInPrivateLiquidationMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInPrivateTransferMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalShortSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferrerTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShortsTrackerAveragePriceWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShouldToggleIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdgAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZlpCooldownDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldToggleIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signalMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalRedeemUsdg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalVaultSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUsdgSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zlpManager", data: BytesLike): Result;

  events: {
    "ClearAction(bytes32)": EventFragment;
    "SignalApprove(address,address,uint256,bytes32)": EventFragment;
    "SignalMint(address,address,uint256,bytes32)": EventFragment;
    "SignalPendingAction(bytes32)": EventFragment;
    "SignalRedeemUsdg(address,address,uint256)": EventFragment;
    "SignalSetGov(address,address,bytes32)": EventFragment;
    "SignalSetHandler(address,address,bool,bytes32)": EventFragment;
    "SignalSetPriceFeed(address,address,bytes32)": EventFragment;
    "SignalVaultSetTokenConfig(address,address,uint256,uint256,uint256,uint256,bool,bool)": EventFragment;
    "SignalWithdrawToken(address,address,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalPendingAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalRedeemUsdg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetHandler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetPriceFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalVaultSetTokenConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalWithdrawToken"): EventFragment;
}

export type ClearActionEvent = TypedEvent<[string] & { action: string }>;

export type SignalApproveEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    token: string;
    spender: string;
    amount: BigNumber;
    action: string;
  }
>;

export type SignalMintEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    token: string;
    receiver: string;
    amount: BigNumber;
    action: string;
  }
>;

export type SignalPendingActionEvent = TypedEvent<
  [string] & { action: string }
>;

export type SignalRedeemUsdgEvent = TypedEvent<
  [string, string, BigNumber] & {
    vault: string;
    token: string;
    amount: BigNumber;
  }
>;

export type SignalSetGovEvent = TypedEvent<
  [string, string, string] & { target: string; gov: string; action: string }
>;

export type SignalSetHandlerEvent = TypedEvent<
  [string, string, boolean, string] & {
    target: string;
    handler: string;
    isActive: boolean;
    action: string;
  }
>;

export type SignalSetPriceFeedEvent = TypedEvent<
  [string, string, string] & {
    vault: string;
    priceFeed: string;
    action: string;
  }
>;

export type SignalVaultSetTokenConfigEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    vault: string;
    token: string;
    tokenDecimals: BigNumber;
    tokenWeight: BigNumber;
    minProfitBps: BigNumber;
    maxUsdgAmount: BigNumber;
    isStable: boolean;
    isShortable: boolean;
  }
>;

export type SignalWithdrawTokenEvent = TypedEvent<
  [string, string, string, BigNumber, string] & {
    target: string;
    token: string;
    receiver: string;
    amount: BigNumber;
    action: string;
  }
>;

export class Timelock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TimelockInterface;

  functions: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LEVERAGE_VALIDATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSetBonusRewards(
      _vester: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchWithdrawFees(
      _vault: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelAction(
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableLeverage(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableLeverage(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    govSetCodeOwner(
      _referralStorage: string,
      _code: BytesLike,
      _newAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMarginFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintReceiver(overrides?: CallOverrides): Promise<[string]>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    processMint(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemUsdg(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      _token: string,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuffer(
      _buffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExternalAdmin(
      _target: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _vault: string,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _minProfitTime: BigNumberish,
      _hasDynamicFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingRate(
      _vault: string,
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _stableFundingRateFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHandler(
      _target: string,
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInPrivateLiquidationMode(
      _vault: string,
      _inPrivateLiquidationMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInPrivateTransferMode(
      _token: string,
      _inPrivateTransferMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsLeverageEnabled(
      _vault: string,
      _isLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsSwapEnabled(
      _vault: string,
      _isSwapEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidator(
      _vault: string,
      _liquidator: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarginFeeBasisPoints(
      _marginFeeBasisPoints: BigNumberish,
      _maxMarginFeeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxGasPrice(
      _vault: string,
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxGlobalShortSize(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLeverage(
      _vault: string,
      _maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _vault: string,
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferrerTier(
      _referralStorage: string,
      _referrer: string,
      _tierId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setShortsTrackerAveragePriceWeight(
      _shortsTrackerAveragePriceWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setShouldToggleIsLeverageEnabled(
      _shouldToggleIsLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapFees(
      _vault: string,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTier(
      _referralStorage: string,
      _tierId: BigNumberish,
      _totalRebate: BigNumberish,
      _discountShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenConfig(
      _vault: string,
      _token: string,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _bufferAmount: BigNumberish,
      _usdgAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUsdgAmounts(
      _vault: string,
      _tokens: string[],
      _usdgAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultUtils(
      _vault: string,
      _vaultUtils: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setZlpCooldownDuration(
      _cooldownDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shouldToggleIsLeverageEnabled(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalMint(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalRedeemUsdg(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalSetGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalSetHandler(
      _target: string,
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalSetPriceFeed(
      _vault: string,
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalVaultSetTokenConfig(
      _vault: string,
      _token: string,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalWithdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<[string]>;

    transferIn(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUsdgSupply(
      usdgAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultSetTokenConfig(
      _vault: string,
      _token: string,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      _vault: string,
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zlpManager(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LEVERAGE_VALIDATION(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSetBonusRewards(
    _vester: string,
    _accounts: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchWithdrawFees(
    _vault: string,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buffer(overrides?: CallOverrides): Promise<BigNumber>;

  cancelAction(
    _action: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableLeverage(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableLeverage(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  govSetCodeOwner(
    _referralStorage: string,
    _code: BytesLike,
    _newAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  maxMarginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  maxTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mintReceiver(overrides?: CallOverrides): Promise<string>;

  pendingActions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  processMint(
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemUsdg(
    _vault: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    _token: string,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuffer(
    _buffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractHandler(
    _handler: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExternalAdmin(
    _target: string,
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _vault: string,
    _taxBasisPoints: BigNumberish,
    _stableTaxBasisPoints: BigNumberish,
    _mintBurnFeeBasisPoints: BigNumberish,
    _swapFeeBasisPoints: BigNumberish,
    _stableSwapFeeBasisPoints: BigNumberish,
    _marginFeeBasisPoints: BigNumberish,
    _liquidationFeeUsd: BigNumberish,
    _minProfitTime: BigNumberish,
    _hasDynamicFees: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingRate(
    _vault: string,
    _fundingInterval: BigNumberish,
    _fundingRateFactor: BigNumberish,
    _stableFundingRateFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _target: string,
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHandler(
    _target: string,
    _handler: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInPrivateLiquidationMode(
    _vault: string,
    _inPrivateLiquidationMode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInPrivateTransferMode(
    _token: string,
    _inPrivateTransferMode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsLeverageEnabled(
    _vault: string,
    _isLeverageEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsSwapEnabled(
    _vault: string,
    _isSwapEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidator(
    _vault: string,
    _liquidator: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarginFeeBasisPoints(
    _marginFeeBasisPoints: BigNumberish,
    _maxMarginFeeBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxGasPrice(
    _vault: string,
    _maxGasPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxGlobalShortSize(
    _vault: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLeverage(
    _vault: string,
    _maxLeverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _vault: string,
    _priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferrerTier(
    _referralStorage: string,
    _referrer: string,
    _tierId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setShortsTrackerAveragePriceWeight(
    _shortsTrackerAveragePriceWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setShouldToggleIsLeverageEnabled(
    _shouldToggleIsLeverageEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapFees(
    _vault: string,
    _taxBasisPoints: BigNumberish,
    _stableTaxBasisPoints: BigNumberish,
    _mintBurnFeeBasisPoints: BigNumberish,
    _swapFeeBasisPoints: BigNumberish,
    _stableSwapFeeBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTier(
    _referralStorage: string,
    _tierId: BigNumberish,
    _totalRebate: BigNumberish,
    _discountShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenConfig(
    _vault: string,
    _token: string,
    _tokenWeight: BigNumberish,
    _minProfitBps: BigNumberish,
    _maxUsdgAmount: BigNumberish,
    _bufferAmount: BigNumberish,
    _usdgAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUsdgAmounts(
    _vault: string,
    _tokens: string[],
    _usdgAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultUtils(
    _vault: string,
    _vaultUtils: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setZlpCooldownDuration(
    _cooldownDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shouldToggleIsLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

  signalApprove(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalMint(
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalRedeemUsdg(
    _vault: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalSetGov(
    _target: string,
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalSetHandler(
    _target: string,
    _handler: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalSetPriceFeed(
    _vault: string,
    _priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalVaultSetTokenConfig(
    _vault: string,
    _token: string,
    _tokenDecimals: BigNumberish,
    _tokenWeight: BigNumberish,
    _minProfitBps: BigNumberish,
    _maxUsdgAmount: BigNumberish,
    _isStable: boolean,
    _isShortable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalWithdrawToken(
    _target: string,
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenManager(overrides?: CallOverrides): Promise<string>;

  transferIn(
    _sender: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUsdgSupply(
    usdgAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultSetTokenConfig(
    _vault: string,
    _token: string,
    _tokenDecimals: BigNumberish,
    _tokenWeight: BigNumberish,
    _minProfitBps: BigNumberish,
    _maxUsdgAmount: BigNumberish,
    _isStable: boolean,
    _isShortable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    _vault: string,
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _target: string,
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zlpManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LEVERAGE_VALIDATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchSetBonusRewards(
      _vester: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchWithdrawFees(
      _vault: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    buffer(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAction(_action: BytesLike, overrides?: CallOverrides): Promise<void>;

    disableLeverage(_vault: string, overrides?: CallOverrides): Promise<void>;

    enableLeverage(_vault: string, overrides?: CallOverrides): Promise<void>;

    govSetCodeOwner(
      _referralStorage: string,
      _code: BytesLike,
      _newAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxMarginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintReceiver(overrides?: CallOverrides): Promise<string>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processMint(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemUsdg(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(
      _token: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setBuffer(_buffer: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setContractHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setExternalAdmin(
      _target: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _vault: string,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _minProfitTime: BigNumberish,
      _hasDynamicFees: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingRate(
      _vault: string,
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _stableFundingRateFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _target: string,
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setHandler(
      _target: string,
      _handler: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setInPrivateLiquidationMode(
      _vault: string,
      _inPrivateLiquidationMode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setInPrivateTransferMode(
      _token: string,
      _inPrivateTransferMode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsLeverageEnabled(
      _vault: string,
      _isLeverageEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSwapEnabled(
      _vault: string,
      _isSwapEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidator(
      _vault: string,
      _liquidator: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarginFeeBasisPoints(
      _marginFeeBasisPoints: BigNumberish,
      _maxMarginFeeBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGasPrice(
      _vault: string,
      _maxGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGlobalShortSize(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLeverage(
      _vault: string,
      _maxLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      _vault: string,
      _priceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferrerTier(
      _referralStorage: string,
      _referrer: string,
      _tierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setShortsTrackerAveragePriceWeight(
      _shortsTrackerAveragePriceWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setShouldToggleIsLeverageEnabled(
      _shouldToggleIsLeverageEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFees(
      _vault: string,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTier(
      _referralStorage: string,
      _tierId: BigNumberish,
      _totalRebate: BigNumberish,
      _discountShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenConfig(
      _vault: string,
      _token: string,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _bufferAmount: BigNumberish,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsdgAmounts(
      _vault: string,
      _tokens: string[],
      _usdgAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultUtils(
      _vault: string,
      _vaultUtils: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setZlpCooldownDuration(
      _cooldownDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldToggleIsLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalMint(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalRedeemUsdg(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetGov(
      _target: string,
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetHandler(
      _target: string,
      _handler: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetPriceFeed(
      _vault: string,
      _priceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signalVaultSetTokenConfig(
      _vault: string,
      _token: string,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    signalWithdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenManager(overrides?: CallOverrides): Promise<string>;

    transferIn(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUsdgSupply(
      usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultSetTokenConfig(
      _vault: string,
      _token: string,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(
      _vault: string,
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    zlpManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ClearAction(bytes32)"(
      action?: null
    ): TypedEventFilter<[string], { action: string }>;

    ClearAction(action?: null): TypedEventFilter<[string], { action: string }>;

    "SignalApprove(address,address,uint256,bytes32)"(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token: string; spender: string; amount: BigNumber; action: string }
    >;

    SignalApprove(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token: string; spender: string; amount: BigNumber; action: string }
    >;

    "SignalMint(address,address,uint256,bytes32)"(
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token: string; receiver: string; amount: BigNumber; action: string }
    >;

    SignalMint(
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token: string; receiver: string; amount: BigNumber; action: string }
    >;

    "SignalPendingAction(bytes32)"(
      action?: null
    ): TypedEventFilter<[string], { action: string }>;

    SignalPendingAction(
      action?: null
    ): TypedEventFilter<[string], { action: string }>;

    "SignalRedeemUsdg(address,address,uint256)"(
      vault?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; token: string; amount: BigNumber }
    >;

    SignalRedeemUsdg(
      vault?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; token: string; amount: BigNumber }
    >;

    "SignalSetGov(address,address,bytes32)"(
      target?: null,
      gov?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, string],
      { target: string; gov: string; action: string }
    >;

    SignalSetGov(
      target?: null,
      gov?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, string],
      { target: string; gov: string; action: string }
    >;

    "SignalSetHandler(address,address,bool,bytes32)"(
      target?: null,
      handler?: null,
      isActive?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, boolean, string],
      { target: string; handler: string; isActive: boolean; action: string }
    >;

    SignalSetHandler(
      target?: null,
      handler?: null,
      isActive?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, boolean, string],
      { target: string; handler: string; isActive: boolean; action: string }
    >;

    "SignalSetPriceFeed(address,address,bytes32)"(
      vault?: null,
      priceFeed?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, string],
      { vault: string; priceFeed: string; action: string }
    >;

    SignalSetPriceFeed(
      vault?: null,
      priceFeed?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, string],
      { vault: string; priceFeed: string; action: string }
    >;

    "SignalVaultSetTokenConfig(address,address,uint256,uint256,uint256,uint256,bool,bool)"(
      vault?: null,
      token?: null,
      tokenDecimals?: null,
      tokenWeight?: null,
      minProfitBps?: null,
      maxUsdgAmount?: null,
      isStable?: null,
      isShortable?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ],
      {
        vault: string;
        token: string;
        tokenDecimals: BigNumber;
        tokenWeight: BigNumber;
        minProfitBps: BigNumber;
        maxUsdgAmount: BigNumber;
        isStable: boolean;
        isShortable: boolean;
      }
    >;

    SignalVaultSetTokenConfig(
      vault?: null,
      token?: null,
      tokenDecimals?: null,
      tokenWeight?: null,
      minProfitBps?: null,
      maxUsdgAmount?: null,
      isStable?: null,
      isShortable?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ],
      {
        vault: string;
        token: string;
        tokenDecimals: BigNumber;
        tokenWeight: BigNumber;
        minProfitBps: BigNumber;
        maxUsdgAmount: BigNumber;
        isStable: boolean;
        isShortable: boolean;
      }
    >;

    "SignalWithdrawToken(address,address,address,uint256,bytes32)"(
      target?: null,
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        target: string;
        token: string;
        receiver: string;
        amount: BigNumber;
        action: string;
      }
    >;

    SignalWithdrawToken(
      target?: null,
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        target: string;
        token: string;
        receiver: string;
        amount: BigNumber;
        action: string;
      }
    >;
  };

  estimateGas: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LEVERAGE_VALIDATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSetBonusRewards(
      _vester: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchWithdrawFees(
      _vault: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buffer(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAction(
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableLeverage(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableLeverage(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    govSetCodeOwner(
      _referralStorage: string,
      _code: BytesLike,
      _newAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxMarginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processMint(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemUsdg(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      _token: string,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuffer(
      _buffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExternalAdmin(
      _target: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFees(
      _vault: string,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _minProfitTime: BigNumberish,
      _hasDynamicFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingRate(
      _vault: string,
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _stableFundingRateFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHandler(
      _target: string,
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInPrivateLiquidationMode(
      _vault: string,
      _inPrivateLiquidationMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInPrivateTransferMode(
      _token: string,
      _inPrivateTransferMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsLeverageEnabled(
      _vault: string,
      _isLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsSwapEnabled(
      _vault: string,
      _isSwapEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidator(
      _vault: string,
      _liquidator: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarginFeeBasisPoints(
      _marginFeeBasisPoints: BigNumberish,
      _maxMarginFeeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxGasPrice(
      _vault: string,
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxGlobalShortSize(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLeverage(
      _vault: string,
      _maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _vault: string,
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferrerTier(
      _referralStorage: string,
      _referrer: string,
      _tierId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setShortsTrackerAveragePriceWeight(
      _shortsTrackerAveragePriceWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setShouldToggleIsLeverageEnabled(
      _shouldToggleIsLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapFees(
      _vault: string,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTier(
      _referralStorage: string,
      _tierId: BigNumberish,
      _totalRebate: BigNumberish,
      _discountShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenConfig(
      _vault: string,
      _token: string,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _bufferAmount: BigNumberish,
      _usdgAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUsdgAmounts(
      _vault: string,
      _tokens: string[],
      _usdgAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultUtils(
      _vault: string,
      _vaultUtils: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setZlpCooldownDuration(
      _cooldownDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shouldToggleIsLeverageEnabled(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalMint(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalRedeemUsdg(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalSetGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalSetHandler(
      _target: string,
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalSetPriceFeed(
      _vault: string,
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalVaultSetTokenConfig(
      _vault: string,
      _token: string,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalWithdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    transferIn(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUsdgSupply(
      usdgAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultSetTokenConfig(
      _vault: string,
      _token: string,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      _vault: string,
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zlpManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FUNDING_RATE_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_LEVERAGE_VALIDATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSetBonusRewards(
      _vester: string,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchWithdrawFees(
      _vault: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelAction(
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableLeverage(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableLeverage(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    govSetCodeOwner(
      _referralStorage: string,
      _code: BytesLike,
      _newAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isHandler(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKeeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marginFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMarginFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTokenSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processMint(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemUsdg(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      _token: string,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuffer(
      _buffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExternalAdmin(
      _target: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _vault: string,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _minProfitTime: BigNumberish,
      _hasDynamicFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingRate(
      _vault: string,
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _stableFundingRateFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHandler(
      _target: string,
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInPrivateLiquidationMode(
      _vault: string,
      _inPrivateLiquidationMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInPrivateTransferMode(
      _token: string,
      _inPrivateTransferMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsLeverageEnabled(
      _vault: string,
      _isLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsSwapEnabled(
      _vault: string,
      _isSwapEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidator(
      _vault: string,
      _liquidator: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarginFeeBasisPoints(
      _marginFeeBasisPoints: BigNumberish,
      _maxMarginFeeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGasPrice(
      _vault: string,
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGlobalShortSize(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLeverage(
      _vault: string,
      _maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _vault: string,
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferrerTier(
      _referralStorage: string,
      _referrer: string,
      _tierId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setShortsTrackerAveragePriceWeight(
      _shortsTrackerAveragePriceWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setShouldToggleIsLeverageEnabled(
      _shouldToggleIsLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFees(
      _vault: string,
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTier(
      _referralStorage: string,
      _tierId: BigNumberish,
      _totalRebate: BigNumberish,
      _discountShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      _vault: string,
      _token: string,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _bufferAmount: BigNumberish,
      _usdgAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUsdgAmounts(
      _vault: string,
      _tokens: string[],
      _usdgAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultUtils(
      _vault: string,
      _vaultUtils: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setZlpCooldownDuration(
      _cooldownDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shouldToggleIsLeverageEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalMint(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalRedeemUsdg(
      _vault: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalSetGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalSetHandler(
      _target: string,
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalSetPriceFeed(
      _vault: string,
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalVaultSetTokenConfig(
      _vault: string,
      _token: string,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalWithdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferIn(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUsdgSupply(
      usdgAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultSetTokenConfig(
      _vault: string,
      _token: string,
      _tokenDecimals: BigNumberish,
      _tokenWeight: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      _vault: string,
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zlpManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
