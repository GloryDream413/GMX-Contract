/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PriceFeedTimelockInterface extends ethers.utils.Interface {
  functions: {
    "MAX_BUFFER()": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "buffer()": FunctionFragment;
    "cancelAction(bytes32)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "isKeeper(address)": FunctionFragment;
    "pendingActions(bytes32)": FunctionFragment;
    "priceFeedSetTokenConfig(address,address,address,uint256,bool)": FunctionFragment;
    "setAdjustment(address,address,bool,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBuffer(uint256)": FunctionFragment;
    "setContractHandler(address,bool)": FunctionFragment;
    "setExternalAdmin(address,address)": FunctionFragment;
    "setGov(address,address)": FunctionFragment;
    "setIsAmmEnabled(address,bool)": FunctionFragment;
    "setIsSecondaryPriceEnabled(address,bool)": FunctionFragment;
    "setIsSpreadEnabled(address,bool)": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setMaxPriceUpdateDelay(address,uint256)": FunctionFragment;
    "setMaxStrictPriceDeviation(address,uint256)": FunctionFragment;
    "setMinBlockInterval(address,uint256)": FunctionFragment;
    "setPriceDuration(address,uint256)": FunctionFragment;
    "setPriceFeedUpdater(address,address,bool)": FunctionFragment;
    "setPriceFeedWatcher(address,address,bool)": FunctionFragment;
    "setPriceSampleSpace(address,uint256)": FunctionFragment;
    "setSpreadBasisPoints(address,address,uint256)": FunctionFragment;
    "setSpreadBasisPointsIfChainError(address,uint256)": FunctionFragment;
    "setSpreadBasisPointsIfInactive(address,uint256)": FunctionFragment;
    "setUseV2Pricing(address,bool)": FunctionFragment;
    "setVaultPriceFeed(address,address)": FunctionFragment;
    "signalApprove(address,address,uint256)": FunctionFragment;
    "signalPriceFeedSetTokenConfig(address,address,address,uint256,bool)": FunctionFragment;
    "signalSetGov(address,address)": FunctionFragment;
    "signalSetPriceFeedUpdater(address,address,bool)": FunctionFragment;
    "signalSetPriceFeedWatcher(address,address,bool)": FunctionFragment;
    "signalWithdrawToken(address,address,address,uint256)": FunctionFragment;
    "tokenManager()": FunctionFragment;
    "transferIn(address,address,uint256)": FunctionFragment;
    "withdrawToken(address,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_BUFFER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buffer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelAction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(functionFragment: "isKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedSetTokenConfig",
    values: [string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAmmEnabled",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSecondaryPriceEnabled",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSpreadEnabled",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceUpdateDelay",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStrictPriceDeviation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBlockInterval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDuration",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeedUpdater",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeedWatcher",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceSampleSpace",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPoints",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfChainError",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfInactive",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseV2Pricing",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultPriceFeed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApprove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalPriceFeedSetTokenConfig",
    values: [string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetGov",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetPriceFeedUpdater",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetPriceFeedWatcher",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "signalWithdrawToken",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferIn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_BUFFER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsAmmEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSecondaryPriceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSpreadEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceUpdateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStrictPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeedUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeedWatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceSampleSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfChainError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseV2Pricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalPriceFeedSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetPriceFeedUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetPriceFeedWatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "ClearAction(bytes32)": EventFragment;
    "SignalApprove(address,address,uint256,bytes32)": EventFragment;
    "SignalPendingAction(bytes32)": EventFragment;
    "SignalPriceFeedSetTokenConfig(address,address,address,uint256,bool)": EventFragment;
    "SignalSetGov(address,address,bytes32)": EventFragment;
    "SignalSetPriceFeedWatcher(address,address,bool)": EventFragment;
    "SignalWithdrawToken(address,address,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalPendingAction"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SignalPriceFeedSetTokenConfig"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetPriceFeedWatcher"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalWithdrawToken"): EventFragment;
}

export type ClearActionEvent = TypedEvent<[string] & { action: string }>;

export type SignalApproveEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    token: string;
    spender: string;
    amount: BigNumber;
    action: string;
  }
>;

export type SignalPendingActionEvent = TypedEvent<
  [string] & { action: string }
>;

export type SignalPriceFeedSetTokenConfigEvent = TypedEvent<
  [string, string, string, BigNumber, boolean] & {
    vaultPriceFeed: string;
    token: string;
    priceFeed: string;
    priceDecimals: BigNumber;
    isStrictStable: boolean;
  }
>;

export type SignalSetGovEvent = TypedEvent<
  [string, string, string] & { target: string; gov: string; action: string }
>;

export type SignalSetPriceFeedWatcherEvent = TypedEvent<
  [string, string, boolean] & {
    fastPriceFeed: string;
    account: string;
    isActive: boolean;
  }
>;

export type SignalWithdrawTokenEvent = TypedEvent<
  [string, string, string, BigNumber, string] & {
    target: string;
    token: string;
    receiver: string;
    amount: BigNumber;
    action: string;
  }
>;

export class PriceFeedTimelock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PriceFeedTimelockInterface;

  functions: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelAction(
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: string,
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdjustment(
      _priceFeed: string,
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuffer(
      _buffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExternalAdmin(
      _target: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsAmmEnabled(
      _priceFeed: string,
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsSecondaryPriceEnabled(
      _priceFeed: string,
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsSpreadEnabled(
      _fastPriceFeed: string,
      _isSpreadEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceUpdateDelay(
      _fastPriceFeed: string,
      _maxPriceUpdateDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxStrictPriceDeviation(
      _priceFeed: string,
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinBlockInterval(
      _fastPriceFeed: string,
      _minBlockInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceDuration(
      _fastPriceFeed: string,
      _priceDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceFeedUpdater(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceFeedWatcher(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceSampleSpace(
      _priceFeed: string,
      _priceSampleSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPoints(
      _priceFeed: string,
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPointsIfChainError(
      _fastPriceFeed: string,
      _spreadBasisPointsIfChainError: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPointsIfInactive(
      _fastPriceFeed: string,
      _spreadBasisPointsIfInactive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUseV2Pricing(
      _priceFeed: string,
      _useV2Pricing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultPriceFeed(
      _fastPriceFeed: string,
      _vaultPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: string,
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalSetGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalSetPriceFeedUpdater(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalSetPriceFeedWatcher(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalWithdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<[string]>;

    transferIn(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buffer(overrides?: CallOverrides): Promise<BigNumber>;

  cancelAction(
    _action: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pendingActions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceFeedSetTokenConfig(
    _vaultPriceFeed: string,
    _token: string,
    _priceFeed: string,
    _priceDecimals: BigNumberish,
    _isStrictStable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdjustment(
    _priceFeed: string,
    _token: string,
    _isAdditive: boolean,
    _adjustmentBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuffer(
    _buffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractHandler(
    _handler: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExternalAdmin(
    _target: string,
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _target: string,
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsAmmEnabled(
    _priceFeed: string,
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsSecondaryPriceEnabled(
    _priceFeed: string,
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsSpreadEnabled(
    _fastPriceFeed: string,
    _isSpreadEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceUpdateDelay(
    _fastPriceFeed: string,
    _maxPriceUpdateDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxStrictPriceDeviation(
    _priceFeed: string,
    _maxStrictPriceDeviation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinBlockInterval(
    _fastPriceFeed: string,
    _minBlockInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceDuration(
    _fastPriceFeed: string,
    _priceDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceFeedUpdater(
    _fastPriceFeed: string,
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceFeedWatcher(
    _fastPriceFeed: string,
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceSampleSpace(
    _priceFeed: string,
    _priceSampleSpace: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPoints(
    _priceFeed: string,
    _token: string,
    _spreadBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPointsIfChainError(
    _fastPriceFeed: string,
    _spreadBasisPointsIfChainError: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPointsIfInactive(
    _fastPriceFeed: string,
    _spreadBasisPointsIfInactive: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUseV2Pricing(
    _priceFeed: string,
    _useV2Pricing: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultPriceFeed(
    _fastPriceFeed: string,
    _vaultPriceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalApprove(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalPriceFeedSetTokenConfig(
    _vaultPriceFeed: string,
    _token: string,
    _priceFeed: string,
    _priceDecimals: BigNumberish,
    _isStrictStable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalSetGov(
    _target: string,
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalSetPriceFeedUpdater(
    _fastPriceFeed: string,
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalSetPriceFeedWatcher(
    _fastPriceFeed: string,
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalWithdrawToken(
    _target: string,
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenManager(overrides?: CallOverrides): Promise<string>;

  transferIn(
    _sender: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _target: string,
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buffer(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAction(_action: BytesLike, overrides?: CallOverrides): Promise<void>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: string,
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdjustment(
      _priceFeed: string,
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setBuffer(_buffer: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setContractHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setExternalAdmin(
      _target: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _target: string,
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsAmmEnabled(
      _priceFeed: string,
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSecondaryPriceEnabled(
      _priceFeed: string,
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSpreadEnabled(
      _fastPriceFeed: string,
      _isSpreadEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceUpdateDelay(
      _fastPriceFeed: string,
      _maxPriceUpdateDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStrictPriceDeviation(
      _priceFeed: string,
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBlockInterval(
      _fastPriceFeed: string,
      _minBlockInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceDuration(
      _fastPriceFeed: string,
      _priceDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeedUpdater(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeedWatcher(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceSampleSpace(
      _priceFeed: string,
      _priceSampleSpace: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPoints(
      _priceFeed: string,
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPointsIfChainError(
      _fastPriceFeed: string,
      _spreadBasisPointsIfChainError: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPointsIfInactive(
      _fastPriceFeed: string,
      _spreadBasisPointsIfInactive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUseV2Pricing(
      _priceFeed: string,
      _useV2Pricing: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultPriceFeed(
      _fastPriceFeed: string,
      _vaultPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: string,
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetGov(
      _target: string,
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetPriceFeedUpdater(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetPriceFeedWatcher(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    signalWithdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenManager(overrides?: CallOverrides): Promise<string>;

    transferIn(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClearAction(bytes32)"(
      action?: null
    ): TypedEventFilter<[string], { action: string }>;

    ClearAction(action?: null): TypedEventFilter<[string], { action: string }>;

    "SignalApprove(address,address,uint256,bytes32)"(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token: string; spender: string; amount: BigNumber; action: string }
    >;

    SignalApprove(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { token: string; spender: string; amount: BigNumber; action: string }
    >;

    "SignalPendingAction(bytes32)"(
      action?: null
    ): TypedEventFilter<[string], { action: string }>;

    SignalPendingAction(
      action?: null
    ): TypedEventFilter<[string], { action: string }>;

    "SignalPriceFeedSetTokenConfig(address,address,address,uint256,bool)"(
      vaultPriceFeed?: null,
      token?: null,
      priceFeed?: null,
      priceDecimals?: null,
      isStrictStable?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, boolean],
      {
        vaultPriceFeed: string;
        token: string;
        priceFeed: string;
        priceDecimals: BigNumber;
        isStrictStable: boolean;
      }
    >;

    SignalPriceFeedSetTokenConfig(
      vaultPriceFeed?: null,
      token?: null,
      priceFeed?: null,
      priceDecimals?: null,
      isStrictStable?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, boolean],
      {
        vaultPriceFeed: string;
        token: string;
        priceFeed: string;
        priceDecimals: BigNumber;
        isStrictStable: boolean;
      }
    >;

    "SignalSetGov(address,address,bytes32)"(
      target?: null,
      gov?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, string],
      { target: string; gov: string; action: string }
    >;

    SignalSetGov(
      target?: null,
      gov?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, string],
      { target: string; gov: string; action: string }
    >;

    "SignalSetPriceFeedWatcher(address,address,bool)"(
      fastPriceFeed?: null,
      account?: null,
      isActive?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { fastPriceFeed: string; account: string; isActive: boolean }
    >;

    SignalSetPriceFeedWatcher(
      fastPriceFeed?: null,
      account?: null,
      isActive?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { fastPriceFeed: string; account: string; isActive: boolean }
    >;

    "SignalWithdrawToken(address,address,address,uint256,bytes32)"(
      target?: null,
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        target: string;
        token: string;
        receiver: string;
        amount: BigNumber;
        action: string;
      }
    >;

    SignalWithdrawToken(
      target?: null,
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string],
      {
        target: string;
        token: string;
        receiver: string;
        amount: BigNumber;
        action: string;
      }
    >;
  };

  estimateGas: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buffer(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAction(
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: string,
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdjustment(
      _priceFeed: string,
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuffer(
      _buffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExternalAdmin(
      _target: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsAmmEnabled(
      _priceFeed: string,
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsSecondaryPriceEnabled(
      _priceFeed: string,
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsSpreadEnabled(
      _fastPriceFeed: string,
      _isSpreadEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPriceUpdateDelay(
      _fastPriceFeed: string,
      _maxPriceUpdateDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxStrictPriceDeviation(
      _priceFeed: string,
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinBlockInterval(
      _fastPriceFeed: string,
      _minBlockInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceDuration(
      _fastPriceFeed: string,
      _priceDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceFeedUpdater(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceFeedWatcher(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceSampleSpace(
      _priceFeed: string,
      _priceSampleSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPoints(
      _priceFeed: string,
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPointsIfChainError(
      _fastPriceFeed: string,
      _spreadBasisPointsIfChainError: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPointsIfInactive(
      _fastPriceFeed: string,
      _spreadBasisPointsIfInactive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUseV2Pricing(
      _priceFeed: string,
      _useV2Pricing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultPriceFeed(
      _fastPriceFeed: string,
      _vaultPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: string,
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalSetGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalSetPriceFeedUpdater(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalSetPriceFeedWatcher(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalWithdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    transferIn(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelAction(
      _action: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isHandler(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKeeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: string,
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdjustment(
      _priceFeed: string,
      _token: string,
      _isAdditive: boolean,
      _adjustmentBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuffer(
      _buffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractHandler(
      _handler: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExternalAdmin(
      _target: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsAmmEnabled(
      _priceFeed: string,
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsSecondaryPriceEnabled(
      _priceFeed: string,
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsSpreadEnabled(
      _fastPriceFeed: string,
      _isSpreadEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceUpdateDelay(
      _fastPriceFeed: string,
      _maxPriceUpdateDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStrictPriceDeviation(
      _priceFeed: string,
      _maxStrictPriceDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinBlockInterval(
      _fastPriceFeed: string,
      _minBlockInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceDuration(
      _fastPriceFeed: string,
      _priceDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeedUpdater(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeedWatcher(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceSampleSpace(
      _priceFeed: string,
      _priceSampleSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPoints(
      _priceFeed: string,
      _token: string,
      _spreadBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPointsIfChainError(
      _fastPriceFeed: string,
      _spreadBasisPointsIfChainError: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPointsIfInactive(
      _fastPriceFeed: string,
      _spreadBasisPointsIfInactive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUseV2Pricing(
      _priceFeed: string,
      _useV2Pricing: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultPriceFeed(
      _fastPriceFeed: string,
      _vaultPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: string,
      _token: string,
      _priceFeed: string,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalSetGov(
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalSetPriceFeedUpdater(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalSetPriceFeedWatcher(
      _fastPriceFeed: string,
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalWithdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferIn(
      _sender: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _target: string,
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
