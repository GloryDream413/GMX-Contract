/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IVaultInterface extends ethers.utils.Interface {
  functions: {
    "allWhitelistedTokens(uint256)": FunctionFragment;
    "allWhitelistedTokensLength()": FunctionFragment;
    "approvedRouters(address,address)": FunctionFragment;
    "bufferAmounts(address)": FunctionFragment;
    "buyUSDG(address,address)": FunctionFragment;
    "cumulativeFundingRates(address)": FunctionFragment;
    "decreasePosition(address,address,address,uint256,uint256,bool,address)": FunctionFragment;
    "directPoolDeposit(address)": FunctionFragment;
    "feeReserves(address)": FunctionFragment;
    "fundingInterval()": FunctionFragment;
    "fundingRateFactor()": FunctionFragment;
    "getDelta(address,uint256,uint256,bool,uint256)": FunctionFragment;
    "getFeeBasisPoints(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "getMaxPrice(address)": FunctionFragment;
    "getMinPrice(address)": FunctionFragment;
    "getNextFundingRate(address)": FunctionFragment;
    "getPosition(address,address,address,bool)": FunctionFragment;
    "getRedemptionAmount(address,uint256)": FunctionFragment;
    "getTargetUsdgAmount(address)": FunctionFragment;
    "globalShortAveragePrices(address)": FunctionFragment;
    "globalShortSizes(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "guaranteedUsd(address)": FunctionFragment;
    "hasDynamicFees()": FunctionFragment;
    "inManagerMode()": FunctionFragment;
    "inPrivateLiquidationMode()": FunctionFragment;
    "increasePosition(address,address,address,uint256,bool)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isLeverageEnabled()": FunctionFragment;
    "isLiquidator(address)": FunctionFragment;
    "isManager(address)": FunctionFragment;
    "isSwapEnabled()": FunctionFragment;
    "lastFundingTimes(address)": FunctionFragment;
    "liquidatePosition(address,address,address,bool,address)": FunctionFragment;
    "liquidationFeeUsd()": FunctionFragment;
    "marginFeeBasisPoints()": FunctionFragment;
    "maxGasPrice()": FunctionFragment;
    "maxGlobalShortSizes(address)": FunctionFragment;
    "maxLeverage()": FunctionFragment;
    "maxUsdgAmounts(address)": FunctionFragment;
    "minProfitBasisPoints(address)": FunctionFragment;
    "minProfitTime()": FunctionFragment;
    "mintBurnFeeBasisPoints()": FunctionFragment;
    "poolAmounts(address)": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "reservedAmounts(address)": FunctionFragment;
    "router()": FunctionFragment;
    "sellUSDG(address,address)": FunctionFragment;
    "setBufferAmount(address,uint256)": FunctionFragment;
    "setError(uint256,string)": FunctionFragment;
    "setFees(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "setFundingRate(uint256,uint256,uint256)": FunctionFragment;
    "setInManagerMode(bool)": FunctionFragment;
    "setInPrivateLiquidationMode(bool)": FunctionFragment;
    "setIsLeverageEnabled(bool)": FunctionFragment;
    "setIsSwapEnabled(bool)": FunctionFragment;
    "setLiquidator(address,bool)": FunctionFragment;
    "setManager(address,bool)": FunctionFragment;
    "setMaxGasPrice(uint256)": FunctionFragment;
    "setMaxGlobalShortSize(address,uint256)": FunctionFragment;
    "setMaxLeverage(uint256)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "setTokenConfig(address,uint256,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "setUsdgAmount(address,uint256)": FunctionFragment;
    "setVaultUtils(address)": FunctionFragment;
    "shortableTokens(address)": FunctionFragment;
    "stableFundingRateFactor()": FunctionFragment;
    "stableSwapFeeBasisPoints()": FunctionFragment;
    "stableTaxBasisPoints()": FunctionFragment;
    "stableTokens(address)": FunctionFragment;
    "swap(address,address,address)": FunctionFragment;
    "swapFeeBasisPoints()": FunctionFragment;
    "taxBasisPoints()": FunctionFragment;
    "tokenBalances(address)": FunctionFragment;
    "tokenDecimals(address)": FunctionFragment;
    "tokenToUsdMin(address,uint256)": FunctionFragment;
    "tokenWeights(address)": FunctionFragment;
    "totalTokenWeights()": FunctionFragment;
    "usdg()": FunctionFragment;
    "usdgAmounts(address)": FunctionFragment;
    "validateLiquidation(address,address,address,bool,bool)": FunctionFragment;
    "whitelistedTokenCount()": FunctionFragment;
    "whitelistedTokens(address)": FunctionFragment;
    "withdrawFees(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allWhitelistedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allWhitelistedTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRouters",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bufferAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyUSDG",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeFundingRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "directPoolDeposit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "feeReserves", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fundingInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingRateFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelta",
    values: [string, BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBasisPoints",
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "getMaxPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "getMinPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNextFundingRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetUsdgAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "globalShortAveragePrices",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "globalShortSizes",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "guaranteedUsd",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDynamicFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inManagerMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inPrivateLiquidationMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLeverageEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSwapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastFundingTimes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [string, string, string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFeeUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marginFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalShortSizes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxUsdgAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minProfitBasisPoints",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minProfitTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBurnFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolAmounts", values: [string]): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reservedAmounts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellUSDG",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBufferAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setError",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInManagerMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInPrivateLiquidationMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLeverageEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSwapEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalShortSize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLeverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdgAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultUtils",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shortableTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableFundingRateFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableSwapFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableTaxBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToUsdMin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWeights",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokenWeights",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdg", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdgAmounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validateLiquidation",
    values: [string, string, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allWhitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allWhitelistedTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bufferAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyUSDG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeFundingRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directPoolDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingRateFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetUsdgAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalShortAveragePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guaranteedUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDynamicFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inManagerMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inPrivateLiquidationMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFundingTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFeeUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxUsdgAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProfitBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProfitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBurnFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reservedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellUSDG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBufferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setError", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInManagerMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInPrivateLiquidationMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalShortSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdgAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableFundingRateFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableSwapFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableTaxBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToUsdMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokenWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdgAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {};
}

export class IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVaultInterface;

  functions: {
    allWhitelistedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allWhitelistedTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    approvedRouters(
      _account: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bufferAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cumulativeFundingRates(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    directPoolDeposit(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeReserves(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fundingInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingRateFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDelta(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      _lastIncreasedTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getFeeBasisPoints(
      _token: string,
      _usdgDelta: BigNumberish,
      _feeBasisPoints: BigNumberish,
      _taxBasisPoints: BigNumberish,
      _increment: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextFundingRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ]
    >;

    getRedemptionAmount(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTargetUsdgAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    globalShortAveragePrices(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    globalShortSizes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    guaranteedUsd(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasDynamicFees(overrides?: CallOverrides): Promise<[boolean]>;

    inManagerMode(overrides?: CallOverrides): Promise<[boolean]>;

    inPrivateLiquidationMode(overrides?: CallOverrides): Promise<[boolean]>;

    increasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isLiquidator(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isManager(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSwapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    lastFundingTimes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGlobalShortSizes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxLeverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxUsdgAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minProfitBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minProfitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    reservedAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sellUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBufferAmount(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setError(
      _errorCode: BigNumberish,
      _error: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _minProfitTime: BigNumberish,
      _hasDynamicFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingRate(
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _stableFundingRateFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInManagerMode(
      _inManagerMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInPrivateLiquidationMode(
      _inPrivateLiquidationMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsLeverageEnabled(
      _isLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsSwapEnabled(
      _isSwapEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidator(
      _liquidator: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      _manager: string,
      _isManager: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxGlobalShortSize(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxLeverage(
      _maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenConfig(
      _token: string,
      _tokenDecimals: BigNumberish,
      _redemptionBps: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUsdgAmount(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultUtils(
      _vaultUtils: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortableTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stableFundingRateFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableTaxBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableTokens(_token: string, overrides?: CallOverrides): Promise<[boolean]>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenBalances(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenDecimals(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenToUsdMin(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenWeights(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalTokenWeights(overrides?: CallOverrides): Promise<[BigNumber]>;

    usdg(overrides?: CallOverrides): Promise<[string]>;

    usdgAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistedTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allWhitelistedTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allWhitelistedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  approvedRouters(
    _account: string,
    _router: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bufferAmounts(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyUSDG(
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cumulativeFundingRates(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreasePosition(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _collateralDelta: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  directPoolDeposit(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeReserves(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

  fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

  getDelta(
    _indexToken: string,
    _size: BigNumberish,
    _averagePrice: BigNumberish,
    _isLong: boolean,
    _lastIncreasedTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getFeeBasisPoints(
    _token: string,
    _usdgDelta: BigNumberish,
    _feeBasisPoints: BigNumberish,
    _taxBasisPoints: BigNumberish,
    _increment: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getMinPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getNextFundingRate(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPosition(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ]
  >;

  getRedemptionAmount(
    _token: string,
    _usdgAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTargetUsdgAmount(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalShortAveragePrices(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalShortSizes(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  guaranteedUsd(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  hasDynamicFees(overrides?: CallOverrides): Promise<boolean>;

  inManagerMode(overrides?: CallOverrides): Promise<boolean>;

  inPrivateLiquidationMode(overrides?: CallOverrides): Promise<boolean>;

  increasePosition(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

  isLiquidator(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isManager(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

  lastFundingTimes(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidatePosition(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    _feeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

  marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  maxGlobalShortSizes(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

  maxUsdgAmounts(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  minProfitBasisPoints(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

  mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  poolAmounts(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  reservedAmounts(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  sellUSDG(
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBufferAmount(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setError(
    _errorCode: BigNumberish,
    _error: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _taxBasisPoints: BigNumberish,
    _stableTaxBasisPoints: BigNumberish,
    _mintBurnFeeBasisPoints: BigNumberish,
    _swapFeeBasisPoints: BigNumberish,
    _stableSwapFeeBasisPoints: BigNumberish,
    _marginFeeBasisPoints: BigNumberish,
    _liquidationFeeUsd: BigNumberish,
    _minProfitTime: BigNumberish,
    _hasDynamicFees: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingRate(
    _fundingInterval: BigNumberish,
    _fundingRateFactor: BigNumberish,
    _stableFundingRateFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInManagerMode(
    _inManagerMode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInPrivateLiquidationMode(
    _inPrivateLiquidationMode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsLeverageEnabled(
    _isLeverageEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsSwapEnabled(
    _isSwapEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidator(
    _liquidator: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    _manager: string,
    _isManager: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxGasPrice(
    _maxGasPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxGlobalShortSize(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxLeverage(
    _maxLeverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenConfig(
    _token: string,
    _tokenDecimals: BigNumberish,
    _redemptionBps: BigNumberish,
    _minProfitBps: BigNumberish,
    _maxUsdgAmount: BigNumberish,
    _isStable: boolean,
    _isShortable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUsdgAmount(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultUtils(
    _vaultUtils: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortableTokens(_token: string, overrides?: CallOverrides): Promise<boolean>;

  stableFundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

  stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  stableTaxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  stableTokens(_token: string, overrides?: CallOverrides): Promise<boolean>;

  swap(
    _tokenIn: string,
    _tokenOut: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  tokenBalances(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenDecimals(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenToUsdMin(
    _token: string,
    _tokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenWeights(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalTokenWeights(overrides?: CallOverrides): Promise<BigNumber>;

  usdg(overrides?: CallOverrides): Promise<string>;

  usdgAmounts(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  validateLiquidation(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    _raise: boolean,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistedTokens(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawFees(
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allWhitelistedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allWhitelistedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    approvedRouters(
      _account: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bufferAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyUSDG(
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeFundingRates(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directPoolDeposit(_token: string, overrides?: CallOverrides): Promise<void>;

    feeReserves(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      _lastIncreasedTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getFeeBasisPoints(
      _token: string,
      _usdgDelta: BigNumberish,
      _feeBasisPoints: BigNumberish,
      _taxBasisPoints: BigNumberish,
      _increment: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMinPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNextFundingRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ]
    >;

    getRedemptionAmount(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetUsdgAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortAveragePrices(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortSizes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    guaranteedUsd(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDynamicFees(overrides?: CallOverrides): Promise<boolean>;

    inManagerMode(overrides?: CallOverrides): Promise<boolean>;

    inPrivateLiquidationMode(overrides?: CallOverrides): Promise<boolean>;

    increasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

    isLiquidator(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isManager(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

    lastFundingTimes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxGlobalShortSizes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsdgAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minProfitBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    poolAmounts(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    reservedAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    sellUSDG(
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBufferAmount(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setError(
      _errorCode: BigNumberish,
      _error: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _minProfitTime: BigNumberish,
      _hasDynamicFees: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingRate(
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _stableFundingRateFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInManagerMode(
      _inManagerMode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setInPrivateLiquidationMode(
      _inPrivateLiquidationMode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsLeverageEnabled(
      _isLeverageEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSwapEnabled(
      _isSwapEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidator(
      _liquidator: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(
      _manager: string,
      _isManager: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGlobalShortSize(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLeverage(
      _maxLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(_priceFeed: string, overrides?: CallOverrides): Promise<void>;

    setTokenConfig(
      _token: string,
      _tokenDecimals: BigNumberish,
      _redemptionBps: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsdgAmount(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultUtils(
      _vaultUtils: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shortableTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stableFundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTaxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokens(_token: string, overrides?: CallOverrides): Promise<boolean>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalances(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenDecimals(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToUsdMin(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWeights(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenWeights(overrides?: CallOverrides): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<string>;

    usdgAmounts(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    allWhitelistedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allWhitelistedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    approvedRouters(
      _account: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bufferAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cumulativeFundingRates(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    directPoolDeposit(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeReserves(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      _lastIncreasedTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: string,
      _usdgDelta: BigNumberish,
      _feeBasisPoints: BigNumberish,
      _taxBasisPoints: BigNumberish,
      _increment: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMinPrice(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNextFundingRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetUsdgAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortAveragePrices(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortSizes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    guaranteedUsd(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDynamicFees(overrides?: CallOverrides): Promise<BigNumber>;

    inManagerMode(overrides?: CallOverrides): Promise<BigNumber>;

    inPrivateLiquidationMode(overrides?: CallOverrides): Promise<BigNumber>;

    increasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidator(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isManager(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSwapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    lastFundingTimes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxGlobalShortSizes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsdgAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minProfitBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    poolAmounts(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    reservedAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sellUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBufferAmount(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setError(
      _errorCode: BigNumberish,
      _error: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFees(
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _minProfitTime: BigNumberish,
      _hasDynamicFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingRate(
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _stableFundingRateFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInManagerMode(
      _inManagerMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInPrivateLiquidationMode(
      _inPrivateLiquidationMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsLeverageEnabled(
      _isLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsSwapEnabled(
      _isSwapEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidator(
      _liquidator: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      _manager: string,
      _isManager: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxGlobalShortSize(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxLeverage(
      _maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenConfig(
      _token: string,
      _tokenDecimals: BigNumberish,
      _redemptionBps: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUsdgAmount(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultUtils(
      _vaultUtils: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortableTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTaxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokens(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalances(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenDecimals(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToUsdMin(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWeights(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenWeights(overrides?: CallOverrides): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<BigNumber>;

    usdgAmounts(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allWhitelistedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allWhitelistedTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedRouters(
      _account: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bufferAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cumulativeFundingRates(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    directPoolDeposit(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeReserves(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingRateFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelta(
      _indexToken: string,
      _size: BigNumberish,
      _averagePrice: BigNumberish,
      _isLong: boolean,
      _lastIncreasedTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeBasisPoints(
      _token: string,
      _usdgDelta: BigNumberish,
      _feeBasisPoints: BigNumberish,
      _taxBasisPoints: BigNumberish,
      _increment: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextFundingRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionAmount(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetUsdgAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalShortAveragePrices(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalShortSizes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guaranteedUsd(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasDynamicFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inManagerMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inPrivateLiquidationMode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLiquidator(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isManager(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSwapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastFundingTimes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _feeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marginFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxGlobalShortSizes(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLeverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxUsdgAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minProfitBasisPoints(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minProfitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintBurnFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reservedAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellUSDG(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBufferAmount(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setError(
      _errorCode: BigNumberish,
      _error: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _taxBasisPoints: BigNumberish,
      _stableTaxBasisPoints: BigNumberish,
      _mintBurnFeeBasisPoints: BigNumberish,
      _swapFeeBasisPoints: BigNumberish,
      _stableSwapFeeBasisPoints: BigNumberish,
      _marginFeeBasisPoints: BigNumberish,
      _liquidationFeeUsd: BigNumberish,
      _minProfitTime: BigNumberish,
      _hasDynamicFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingRate(
      _fundingInterval: BigNumberish,
      _fundingRateFactor: BigNumberish,
      _stableFundingRateFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInManagerMode(
      _inManagerMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInPrivateLiquidationMode(
      _inPrivateLiquidationMode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsLeverageEnabled(
      _isLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsSwapEnabled(
      _isSwapEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidator(
      _liquidator: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      _manager: string,
      _isManager: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGasPrice(
      _maxGasPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGlobalShortSize(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLeverage(
      _maxLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      _token: string,
      _tokenDecimals: BigNumberish,
      _redemptionBps: BigNumberish,
      _minProfitBps: BigNumberish,
      _maxUsdgAmount: BigNumberish,
      _isStable: boolean,
      _isShortable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUsdgAmount(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultUtils(
      _vaultUtils: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortableTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFundingRateFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableSwapFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableTaxBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      _tokenIn: string,
      _tokenOut: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalances(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenDecimals(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToUsdMin(
      _token: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenWeights(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokenWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdgAmounts(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
