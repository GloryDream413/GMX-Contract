/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PositionRouterCallbackReceiverTest,
  PositionRouterCallbackReceiverTestInterface,
} from "../PositionRouterCallbackReceiverTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "positionKey",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isExecuted",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isIncrease",
        type: "bool",
      },
    ],
    name: "CallbackCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "positionKey",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "isExecuted",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isIncrease",
        type: "bool",
      },
    ],
    name: "zomiPositionCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060d68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063fb92e50814602d575b600080fd5b605760048036036060811015604157600080fd5b5080359060208101351515906040013515156059565b005b6040805184815283151560208201528215158183015290517f4c5b183c9c52e97ac4369ee0a4685a3af880b74946655c4b6e7366b6af1733809181900360600190a150505056fea2646970667358221220fdcd2d8ba9e4769e9721f323f7c0449f97a49484f0e0395fbd429e16ccb41c9964736f6c634300060c0033";

export class PositionRouterCallbackReceiverTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PositionRouterCallbackReceiverTest> {
    return super.deploy(
      overrides || {}
    ) as Promise<PositionRouterCallbackReceiverTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PositionRouterCallbackReceiverTest {
    return super.attach(address) as PositionRouterCallbackReceiverTest;
  }
  connect(signer: Signer): PositionRouterCallbackReceiverTest__factory {
    return super.connect(signer) as PositionRouterCallbackReceiverTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PositionRouterCallbackReceiverTestInterface {
    return new utils.Interface(
      _abi
    ) as PositionRouterCallbackReceiverTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PositionRouterCallbackReceiverTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PositionRouterCallbackReceiverTest;
  }
}
