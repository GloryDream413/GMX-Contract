/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FastPriceFeedInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "BITMASK_32()": FunctionFragment;
    "CUMULATIVE_DELTA_PRECISION()": FunctionFragment;
    "MAX_CUMULATIVE_FAST_DELTA()": FunctionFragment;
    "MAX_CUMULATIVE_REF_DELTA()": FunctionFragment;
    "MAX_PRICE_DURATION()": FunctionFragment;
    "MAX_REF_PRICE()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "disableFastPrice()": FunctionFragment;
    "disableFastPriceVoteCount()": FunctionFragment;
    "disableFastPriceVotes(address)": FunctionFragment;
    "enableFastPrice()": FunctionFragment;
    "fastPriceEvents()": FunctionFragment;
    "favorFastPrice(address)": FunctionFragment;
    "getPrice(address,uint256,bool)": FunctionFragment;
    "getPriceData(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(uint256,address[],address[])": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isSigner(address)": FunctionFragment;
    "isSpreadEnabled()": FunctionFragment;
    "isUpdater(address)": FunctionFragment;
    "lastUpdatedAt()": FunctionFragment;
    "lastUpdatedBlock()": FunctionFragment;
    "maxCumulativeDeltaDiffs(address)": FunctionFragment;
    "maxDeviationBasisPoints()": FunctionFragment;
    "maxPriceUpdateDelay()": FunctionFragment;
    "maxTimeDeviation()": FunctionFragment;
    "minAuthorizations()": FunctionFragment;
    "minBlockInterval()": FunctionFragment;
    "positionRouter()": FunctionFragment;
    "priceData(address)": FunctionFragment;
    "priceDataInterval()": FunctionFragment;
    "priceDuration()": FunctionFragment;
    "prices(address)": FunctionFragment;
    "setCompactedPrices(uint256[],uint256)": FunctionFragment;
    "setFastPriceEvents(address)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setIsSpreadEnabled(bool)": FunctionFragment;
    "setLastUpdatedAt(uint256)": FunctionFragment;
    "setMaxCumulativeDeltaDiffs(address[],uint256[])": FunctionFragment;
    "setMaxDeviationBasisPoints(uint256)": FunctionFragment;
    "setMaxPriceUpdateDelay(uint256)": FunctionFragment;
    "setMaxTimeDeviation(uint256)": FunctionFragment;
    "setMinAuthorizations(uint256)": FunctionFragment;
    "setMinBlockInterval(uint256)": FunctionFragment;
    "setPriceDataInterval(uint256)": FunctionFragment;
    "setPriceDuration(uint256)": FunctionFragment;
    "setPrices(address[],uint256[],uint256)": FunctionFragment;
    "setPricesWithBits(uint256,uint256)": FunctionFragment;
    "setPricesWithBitsAndExecute(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setSigner(address,bool)": FunctionFragment;
    "setSpreadBasisPointsIfChainError(uint256)": FunctionFragment;
    "setSpreadBasisPointsIfInactive(uint256)": FunctionFragment;
    "setTokenManager(address)": FunctionFragment;
    "setTokens(address[],uint256[])": FunctionFragment;
    "setUpdater(address,bool)": FunctionFragment;
    "setVaultPriceFeed(address)": FunctionFragment;
    "spreadBasisPointsIfChainError()": FunctionFragment;
    "spreadBasisPointsIfInactive()": FunctionFragment;
    "tokenManager()": FunctionFragment;
    "tokenPrecisions(uint256)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "vaultPriceFeed()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BITMASK_32",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CUMULATIVE_DELTA_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CUMULATIVE_FAST_DELTA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CUMULATIVE_REF_DELTA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REF_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableFastPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableFastPriceVoteCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableFastPriceVotes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableFastPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fastPriceEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "favorFastPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceData",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isSigner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSpreadEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isUpdater", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCumulativeDeltaDiffs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeviationBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceUpdateDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimeDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuthorizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBlockInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "priceDataInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prices", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCompactedPrices",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFastPriceEvents",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setIsSpreadEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastUpdatedAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeviationBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceUpdateDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTimeDeviation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAuthorizations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBlockInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDataInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [string[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricesWithBits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricesWithBitsAndExecute",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfChainError",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfInactive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokens",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdater",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "spreadBasisPointsIfChainError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spreadBasisPointsIfInactive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrecisions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultPriceFeed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BITMASK_32", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CUMULATIVE_DELTA_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CUMULATIVE_FAST_DELTA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CUMULATIVE_REF_DELTA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REF_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableFastPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableFastPriceVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableFastPriceVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableFastPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fastPriceEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "favorFastPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSpreadEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCumulativeDeltaDiffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDeviationBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceUpdateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuthorizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDataInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCompactedPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFastPriceEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsSpreadEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeviationBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceUpdateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTimeDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAuthorizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDataInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPricesWithBits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPricesWithBitsAndExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfChainError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadBasisPointsIfChainError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadBasisPointsIfInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPrecisions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultPriceFeed",
    data: BytesLike
  ): Result;

  events: {
    "DisableFastPrice(address)": EventFragment;
    "EnableFastPrice(address)": EventFragment;
    "MaxCumulativeDeltaDiffExceeded(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PriceData(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisableFastPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableFastPrice"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxCumulativeDeltaDiffExceeded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceData"): EventFragment;
}

export type DisableFastPriceEvent = TypedEvent<[string] & { signer: string }>;

export type EnableFastPriceEvent = TypedEvent<[string] & { signer: string }>;

export type MaxCumulativeDeltaDiffExceededEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    token: string;
    refPrice: BigNumber;
    fastPrice: BigNumber;
    cumulativeRefDelta: BigNumber;
    cumulativeFastDelta: BigNumber;
  }
>;

export type PriceDataEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    token: string;
    refPrice: BigNumber;
    fastPrice: BigNumber;
    cumulativeRefDelta: BigNumber;
    cumulativeFastDelta: BigNumber;
  }
>;

export class FastPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FastPriceFeedInterface;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    BITMASK_32(overrides?: CallOverrides): Promise<[BigNumber]>;

    CUMULATIVE_DELTA_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_CUMULATIVE_FAST_DELTA(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_CUMULATIVE_REF_DELTA(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_REF_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableFastPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableFastPriceVoteCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableFastPriceVotes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    enableFastPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fastPriceEvents(overrides?: CallOverrides): Promise<[string]>;

    favorFastPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPrice(
      _token: string,
      _refPrice: BigNumberish,
      _maximise: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceData(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _minAuthorizations: BigNumberish,
      _signers: string[],
      _updaters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isSigner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSpreadEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isUpdater(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxCumulativeDeltaDiffs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxDeviationBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPriceUpdateDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAuthorizations(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBlockInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    positionRouter(overrides?: CallOverrides): Promise<[string]>;

    priceData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        refPrice: BigNumber;
        refTime: number;
        cumulativeRefDelta: number;
        cumulativeFastDelta: number;
      }
    >;

    priceDataInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    prices(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setCompactedPrices(
      _priceBitArray: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFastPriceEvents(
      _fastPriceEvents: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsSpreadEnabled(
      _isSpreadEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLastUpdatedAt(
      _lastUpdatedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxCumulativeDeltaDiffs(
      _tokens: string[],
      _maxCumulativeDeltaDiffs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTimeDeviation(
      _maxTimeDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAuthorizations(
      _minAuthorizations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinBlockInterval(
      _minBlockInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceDataInterval(
      _priceDataInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceDuration(
      _priceDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrices(
      _tokens: string[],
      _prices: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPricesWithBits(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPricesWithBitsAndExecute(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      _endIndexForIncreasePositions: BigNumberish,
      _endIndexForDecreasePositions: BigNumberish,
      _maxIncreasePositions: BigNumberish,
      _maxDecreasePositions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenManager(
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokens(
      _tokens: string[],
      _tokenPrecisions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpdater(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultPriceFeed(
      _vaultPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spreadBasisPointsIfChainError(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    spreadBasisPointsIfInactive(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenManager(overrides?: CallOverrides): Promise<[string]>;

    tokenPrecisions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    vaultPriceFeed(overrides?: CallOverrides): Promise<[string]>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  BITMASK_32(overrides?: CallOverrides): Promise<BigNumber>;

  CUMULATIVE_DELTA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_CUMULATIVE_FAST_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_CUMULATIVE_REF_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_REF_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  disableFastPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableFastPriceVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

  disableFastPriceVotes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  enableFastPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fastPriceEvents(overrides?: CallOverrides): Promise<string>;

  favorFastPrice(_token: string, overrides?: CallOverrides): Promise<boolean>;

  getPrice(
    _token: string,
    _refPrice: BigNumberish,
    _maximise: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceData(
    _token: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  gov(overrides?: CallOverrides): Promise<string>;

  initialize(
    _minAuthorizations: BigNumberish,
    _signers: string[],
    _updaters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isSigner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isSpreadEnabled(overrides?: CallOverrides): Promise<boolean>;

  isUpdater(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  maxCumulativeDeltaDiffs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxDeviationBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceUpdateDelay(overrides?: CallOverrides): Promise<BigNumber>;

  maxTimeDeviation(overrides?: CallOverrides): Promise<BigNumber>;

  minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

  minBlockInterval(overrides?: CallOverrides): Promise<BigNumber>;

  positionRouter(overrides?: CallOverrides): Promise<string>;

  priceData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number] & {
      refPrice: BigNumber;
      refTime: number;
      cumulativeRefDelta: number;
      cumulativeFastDelta: number;
    }
  >;

  priceDataInterval(overrides?: CallOverrides): Promise<BigNumber>;

  priceDuration(overrides?: CallOverrides): Promise<BigNumber>;

  prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setCompactedPrices(
    _priceBitArray: BigNumberish[],
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFastPriceEvents(
    _fastPriceEvents: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsSpreadEnabled(
    _isSpreadEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLastUpdatedAt(
    _lastUpdatedAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxCumulativeDeltaDiffs(
    _tokens: string[],
    _maxCumulativeDeltaDiffs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDeviationBasisPoints(
    _maxDeviationBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceUpdateDelay(
    _maxPriceUpdateDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTimeDeviation(
    _maxTimeDeviation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAuthorizations(
    _minAuthorizations: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinBlockInterval(
    _minBlockInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceDataInterval(
    _priceDataInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceDuration(
    _priceDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrices(
    _tokens: string[],
    _prices: BigNumberish[],
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPricesWithBits(
    _priceBits: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPricesWithBitsAndExecute(
    _priceBits: BigNumberish,
    _timestamp: BigNumberish,
    _endIndexForIncreasePositions: BigNumberish,
    _endIndexForDecreasePositions: BigNumberish,
    _maxIncreasePositions: BigNumberish,
    _maxDecreasePositions: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPointsIfChainError(
    _spreadBasisPointsIfChainError: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPointsIfInactive(
    _spreadBasisPointsIfInactive: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenManager(
    _tokenManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokens(
    _tokens: string[],
    _tokenPrecisions: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpdater(
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultPriceFeed(
    _vaultPriceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spreadBasisPointsIfChainError(overrides?: CallOverrides): Promise<BigNumber>;

  spreadBasisPointsIfInactive(overrides?: CallOverrides): Promise<BigNumber>;

  tokenManager(overrides?: CallOverrides): Promise<string>;

  tokenPrecisions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  vaultPriceFeed(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    BITMASK_32(overrides?: CallOverrides): Promise<BigNumber>;

    CUMULATIVE_DELTA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CUMULATIVE_FAST_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CUMULATIVE_REF_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REF_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    disableFastPrice(overrides?: CallOverrides): Promise<void>;

    disableFastPriceVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    disableFastPriceVotes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableFastPrice(overrides?: CallOverrides): Promise<void>;

    fastPriceEvents(overrides?: CallOverrides): Promise<string>;

    favorFastPrice(_token: string, overrides?: CallOverrides): Promise<boolean>;

    getPrice(
      _token: string,
      _refPrice: BigNumberish,
      _maximise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceData(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    gov(overrides?: CallOverrides): Promise<string>;

    initialize(
      _minAuthorizations: BigNumberish,
      _signers: string[],
      _updaters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isSigner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isSpreadEnabled(overrides?: CallOverrides): Promise<boolean>;

    isUpdater(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    maxCumulativeDeltaDiffs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDeviationBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceUpdateDelay(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockInterval(overrides?: CallOverrides): Promise<BigNumber>;

    positionRouter(overrides?: CallOverrides): Promise<string>;

    priceData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        refPrice: BigNumber;
        refTime: number;
        cumulativeRefDelta: number;
        cumulativeFastDelta: number;
      }
    >;

    priceDataInterval(overrides?: CallOverrides): Promise<BigNumber>;

    priceDuration(overrides?: CallOverrides): Promise<BigNumber>;

    prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setCompactedPrices(
      _priceBitArray: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFastPriceEvents(
      _fastPriceEvents: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setIsSpreadEnabled(
      _isSpreadEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLastUpdatedAt(
      _lastUpdatedAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCumulativeDeltaDiffs(
      _tokens: string[],
      _maxCumulativeDeltaDiffs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTimeDeviation(
      _maxTimeDeviation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAuthorizations(
      _minAuthorizations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBlockInterval(
      _minBlockInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceDataInterval(
      _priceDataInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceDuration(
      _priceDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrices(
      _tokens: string[],
      _prices: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricesWithBits(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricesWithBitsAndExecute(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      _endIndexForIncreasePositions: BigNumberish,
      _endIndexForDecreasePositions: BigNumberish,
      _maxIncreasePositions: BigNumberish,
      _maxDecreasePositions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenManager(
      _tokenManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokens(
      _tokens: string[],
      _tokenPrecisions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdater(
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultPriceFeed(
      _vaultPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    spreadBasisPointsIfChainError(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spreadBasisPointsIfInactive(overrides?: CallOverrides): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<string>;

    tokenPrecisions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    vaultPriceFeed(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DisableFastPrice(address)"(
      signer?: null
    ): TypedEventFilter<[string], { signer: string }>;

    DisableFastPrice(
      signer?: null
    ): TypedEventFilter<[string], { signer: string }>;

    "EnableFastPrice(address)"(
      signer?: null
    ): TypedEventFilter<[string], { signer: string }>;

    EnableFastPrice(
      signer?: null
    ): TypedEventFilter<[string], { signer: string }>;

    "MaxCumulativeDeltaDiffExceeded(address,uint256,uint256,uint256,uint256)"(
      token?: null,
      refPrice?: null,
      fastPrice?: null,
      cumulativeRefDelta?: null,
      cumulativeFastDelta?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        refPrice: BigNumber;
        fastPrice: BigNumber;
        cumulativeRefDelta: BigNumber;
        cumulativeFastDelta: BigNumber;
      }
    >;

    MaxCumulativeDeltaDiffExceeded(
      token?: null,
      refPrice?: null,
      fastPrice?: null,
      cumulativeRefDelta?: null,
      cumulativeFastDelta?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        refPrice: BigNumber;
        fastPrice: BigNumber;
        cumulativeRefDelta: BigNumber;
        cumulativeFastDelta: BigNumber;
      }
    >;

    "PriceData(address,uint256,uint256,uint256,uint256)"(
      token?: null,
      refPrice?: null,
      fastPrice?: null,
      cumulativeRefDelta?: null,
      cumulativeFastDelta?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        refPrice: BigNumber;
        fastPrice: BigNumber;
        cumulativeRefDelta: BigNumber;
        cumulativeFastDelta: BigNumber;
      }
    >;

    PriceData(
      token?: null,
      refPrice?: null,
      fastPrice?: null,
      cumulativeRefDelta?: null,
      cumulativeFastDelta?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        refPrice: BigNumber;
        fastPrice: BigNumber;
        cumulativeRefDelta: BigNumber;
        cumulativeFastDelta: BigNumber;
      }
    >;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    BITMASK_32(overrides?: CallOverrides): Promise<BigNumber>;

    CUMULATIVE_DELTA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CUMULATIVE_FAST_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CUMULATIVE_REF_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REF_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    disableFastPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableFastPriceVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    disableFastPriceVotes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enableFastPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fastPriceEvents(overrides?: CallOverrides): Promise<BigNumber>;

    favorFastPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: string,
      _refPrice: BigNumberish,
      _maximise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceData(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _minAuthorizations: BigNumberish,
      _signers: string[],
      _updaters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isSigner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSpreadEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isUpdater(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    maxCumulativeDeltaDiffs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDeviationBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceUpdateDelay(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockInterval(overrides?: CallOverrides): Promise<BigNumber>;

    positionRouter(overrides?: CallOverrides): Promise<BigNumber>;

    priceData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceDataInterval(overrides?: CallOverrides): Promise<BigNumber>;

    priceDuration(overrides?: CallOverrides): Promise<BigNumber>;

    prices(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setCompactedPrices(
      _priceBitArray: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFastPriceEvents(
      _fastPriceEvents: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsSpreadEnabled(
      _isSpreadEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLastUpdatedAt(
      _lastUpdatedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxCumulativeDeltaDiffs(
      _tokens: string[],
      _maxCumulativeDeltaDiffs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTimeDeviation(
      _maxTimeDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAuthorizations(
      _minAuthorizations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinBlockInterval(
      _minBlockInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceDataInterval(
      _priceDataInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceDuration(
      _priceDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrices(
      _tokens: string[],
      _prices: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPricesWithBits(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPricesWithBitsAndExecute(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      _endIndexForIncreasePositions: BigNumberish,
      _endIndexForDecreasePositions: BigNumberish,
      _maxIncreasePositions: BigNumberish,
      _maxDecreasePositions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSigner(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenManager(
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokens(
      _tokens: string[],
      _tokenPrecisions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpdater(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultPriceFeed(
      _vaultPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spreadBasisPointsIfChainError(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spreadBasisPointsIfInactive(overrides?: CallOverrides): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrecisions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    vaultPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BITMASK_32(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CUMULATIVE_DELTA_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_CUMULATIVE_FAST_DELTA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_CUMULATIVE_REF_DELTA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PRICE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_REF_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableFastPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableFastPriceVoteCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableFastPriceVotes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableFastPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fastPriceEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    favorFastPrice(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _token: string,
      _refPrice: BigNumberish,
      _maximise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceData(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _minAuthorizations: BigNumberish,
      _signers: string[],
      _updaters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSigner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSpreadEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUpdater(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxCumulativeDeltaDiffs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDeviationBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceUpdateDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAuthorizations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBlockInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceDataInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prices(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCompactedPrices(
      _priceBitArray: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFastPriceEvents(
      _fastPriceEvents: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsSpreadEnabled(
      _isSpreadEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLastUpdatedAt(
      _lastUpdatedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCumulativeDeltaDiffs(
      _tokens: string[],
      _maxCumulativeDeltaDiffs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTimeDeviation(
      _maxTimeDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAuthorizations(
      _minAuthorizations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinBlockInterval(
      _minBlockInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceDataInterval(
      _priceDataInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceDuration(
      _priceDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrices(
      _tokens: string[],
      _prices: BigNumberish[],
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPricesWithBits(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPricesWithBitsAndExecute(
      _priceBits: BigNumberish,
      _timestamp: BigNumberish,
      _endIndexForIncreasePositions: BigNumberish,
      _endIndexForDecreasePositions: BigNumberish,
      _maxIncreasePositions: BigNumberish,
      _maxDecreasePositions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenManager(
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokens(
      _tokens: string[],
      _tokenPrecisions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpdater(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultPriceFeed(
      _vaultPriceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spreadBasisPointsIfChainError(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spreadBasisPointsIfInactive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPrecisions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
