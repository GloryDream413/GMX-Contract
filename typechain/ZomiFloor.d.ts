/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ZomiFloorInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "BURN_BASIS_POINTS()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "actionsNonce()": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256,uint256)": FunctionFragment;
    "approveNFT(address,address,uint256,uint256)": FunctionFragment;
    "approveNFTs(address,address,uint256[],uint256)": FunctionFragment;
    "backedSupply()": FunctionFragment;
    "baseMintPrice()": FunctionFragment;
    "burn(uint256,uint256,address)": FunctionFragment;
    "getBurnAmountOut(uint256)": FunctionFragment;
    "getMintPrice()": FunctionFragment;
    "initialize(address[])": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isSigner(address)": FunctionFragment;
    "minAuthorizations()": FunctionFragment;
    "mint(uint256,uint256,address)": FunctionFragment;
    "mintMultiplier()": FunctionFragment;
    "mintedSupply()": FunctionFragment;
    "multiplierPrecision()": FunctionFragment;
    "pendingActions(bytes32)": FunctionFragment;
    "receiveNFTs(address,address,uint256[])": FunctionFragment;
    "reserveToken()": FunctionFragment;
    "setAdmin(address,address,uint256)": FunctionFragment;
    "setBackedSupply(uint256)": FunctionFragment;
    "setGov(address,address,address,uint256)": FunctionFragment;
    "setHandler(address,bool)": FunctionFragment;
    "setMintMultiplier(uint256)": FunctionFragment;
    "signApprove(address,address,uint256,uint256)": FunctionFragment;
    "signApproveNFT(address,address,uint256,uint256)": FunctionFragment;
    "signApproveNFTs(address,address,uint256[],uint256)": FunctionFragment;
    "signSetAdmin(address,address,uint256)": FunctionFragment;
    "signSetGov(address,address,address,uint256)": FunctionFragment;
    "signalApprove(address,address,uint256)": FunctionFragment;
    "signalApproveNFT(address,address,uint256)": FunctionFragment;
    "signalApproveNFTs(address,address,uint256[])": FunctionFragment;
    "signalSetAdmin(address,address)": FunctionFragment;
    "signalSetGov(address,address,address)": FunctionFragment;
    "signedActions(address,bytes32)": FunctionFragment;
    "signers(uint256)": FunctionFragment;
    "signersLength()": FunctionFragment;
    "zomi()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BURN_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "actionsNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNFT",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNFTs",
    values: [string, string, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "backedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "isHandler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isSigner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minAuthorizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplierPrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveNFTs",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBackedSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signApprove",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signApproveNFT",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signApproveNFTs",
    values: [string, string, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signSetAdmin",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signSetGov",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApprove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApproveNFT",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApproveNFTs",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetGov",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "signedActions",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signersLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "zomi", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BURN_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actionsNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBurnAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minAuthorizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplierPrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBackedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signApproveNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signApproveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signSetAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signSetGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApproveNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApproveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signedActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zomi", data: BytesLike): Result;

  events: {
    "ClearAction(bytes32,uint256)": EventFragment;
    "SignAction(bytes32,uint256)": EventFragment;
    "SignalApprove(address,address,uint256,bytes32,uint256)": EventFragment;
    "SignalApproveNFT(address,address,uint256,bytes32,uint256)": EventFragment;
    "SignalApproveNFTs(address,address,uint256[],bytes32,uint256)": EventFragment;
    "SignalPendingAction(bytes32,uint256)": EventFragment;
    "SignalSetAdmin(address,address,bytes32,uint256)": EventFragment;
    "SignalSetGov(address,address,address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApproveNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApproveNFTs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalPendingAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetGov"): EventFragment;
}

export type ClearActionEvent = TypedEvent<
  [string, BigNumber] & { action: string; nonce: BigNumber }
>;

export type SignActionEvent = TypedEvent<
  [string, BigNumber] & { action: string; nonce: BigNumber }
>;

export type SignalApproveEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    token: string;
    spender: string;
    amount: BigNumber;
    action: string;
    nonce: BigNumber;
  }
>;

export type SignalApproveNFTEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    token: string;
    spender: string;
    tokenId: BigNumber;
    action: string;
    nonce: BigNumber;
  }
>;

export type SignalApproveNFTsEvent = TypedEvent<
  [string, string, BigNumber[], string, BigNumber] & {
    token: string;
    spender: string;
    tokenIds: BigNumber[];
    action: string;
    nonce: BigNumber;
  }
>;

export type SignalPendingActionEvent = TypedEvent<
  [string, BigNumber] & { action: string; nonce: BigNumber }
>;

export type SignalSetAdminEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    target: string;
    admin: string;
    action: string;
    nonce: BigNumber;
  }
>;

export type SignalSetGovEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    timelock: string;
    target: string;
    gov: string;
    action: string;
    nonce: BigNumber;
  }
>;

export class ZomiFloor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZomiFloorInterface;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    BURN_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    actionsNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    backedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseMintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      _amount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBurnAmountOut(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _signers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isSigner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    minAuthorizations(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _amount: BigNumberish,
      _maxCost: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiplierPrecision(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    receiveNFTs(
      _token: string,
      _sender: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveToken(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      _target: string,
      _admin: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBackedSupply(
      _backedSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _timelock: string,
      _target: string,
      _gov: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintMultiplier(
      _mintMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signApproveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signApproveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signSetAdmin(
      _target: string,
      _admin: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signSetGov(
      _timelock: string,
      _target: string,
      _gov: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalApproveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalApproveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalSetAdmin(
      _target: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalSetGov(
      _timelock: string,
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signedActions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    signersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    zomi(overrides?: CallOverrides): Promise<[string]>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  BURN_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveNFT(
    _token: string,
    _spender: string,
    _tokenId: BigNumberish,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveNFTs(
    _token: string,
    _spender: string,
    _tokenIds: BigNumberish[],
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  backedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  baseMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    _amount: BigNumberish,
    _minOut: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBurnAmountOut(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _signers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isSigner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _amount: BigNumberish,
    _maxCost: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  mintedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  multiplierPrecision(overrides?: CallOverrides): Promise<BigNumber>;

  pendingActions(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  receiveNFTs(
    _token: string,
    _sender: string,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveToken(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    _target: string,
    _admin: string,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBackedSupply(
    _backedSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _timelock: string,
    _target: string,
    _gov: string,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHandler(
    _handler: string,
    _isHandler: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintMultiplier(
    _mintMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signApprove(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signApproveNFT(
    _token: string,
    _spender: string,
    _tokenId: BigNumberish,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signApproveNFTs(
    _token: string,
    _spender: string,
    _tokenIds: BigNumberish[],
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signSetAdmin(
    _target: string,
    _admin: string,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signSetGov(
    _timelock: string,
    _target: string,
    _gov: string,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalApprove(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalApproveNFT(
    _token: string,
    _spender: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalApproveNFTs(
    _token: string,
    _spender: string,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalSetAdmin(
    _target: string,
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalSetGov(
    _timelock: string,
    _target: string,
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signedActions(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  signersLength(overrides?: CallOverrides): Promise<BigNumber>;

  zomi(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    BURN_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    backedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    baseMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _amount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBurnAmountOut(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(_signers: string[], overrides?: CallOverrides): Promise<void>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isSigner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: BigNumberish,
      _maxCost: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    mintedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    multiplierPrecision(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveNFTs(
      _token: string,
      _sender: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    reserveToken(overrides?: CallOverrides): Promise<string>;

    setAdmin(
      _target: string,
      _admin: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBackedSupply(
      _backedSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _timelock: string,
      _target: string,
      _gov: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintMultiplier(
      _mintMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signApproveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signApproveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signSetAdmin(
      _target: string,
      _admin: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signSetGov(
      _timelock: string,
      _target: string,
      _gov: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApproveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApproveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetAdmin(
      _target: string,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetGov(
      _timelock: string,
      _target: string,
      _gov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signedActions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    signersLength(overrides?: CallOverrides): Promise<BigNumber>;

    zomi(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ClearAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    ClearAction(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    "SignAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    SignAction(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    "SignalApprove(address,address,uint256,bytes32,uint256)"(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        token: string;
        spender: string;
        amount: BigNumber;
        action: string;
        nonce: BigNumber;
      }
    >;

    SignalApprove(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        token: string;
        spender: string;
        amount: BigNumber;
        action: string;
        nonce: BigNumber;
      }
    >;

    "SignalApproveNFT(address,address,uint256,bytes32,uint256)"(
      token?: null,
      spender?: null,
      tokenId?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        token: string;
        spender: string;
        tokenId: BigNumber;
        action: string;
        nonce: BigNumber;
      }
    >;

    SignalApproveNFT(
      token?: null,
      spender?: null,
      tokenId?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        token: string;
        spender: string;
        tokenId: BigNumber;
        action: string;
        nonce: BigNumber;
      }
    >;

    "SignalApproveNFTs(address,address,uint256[],bytes32,uint256)"(
      token?: null,
      spender?: null,
      tokenIds?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], string, BigNumber],
      {
        token: string;
        spender: string;
        tokenIds: BigNumber[];
        action: string;
        nonce: BigNumber;
      }
    >;

    SignalApproveNFTs(
      token?: null,
      spender?: null,
      tokenIds?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], string, BigNumber],
      {
        token: string;
        spender: string;
        tokenIds: BigNumber[];
        action: string;
        nonce: BigNumber;
      }
    >;

    "SignalPendingAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    SignalPendingAction(
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { action: string; nonce: BigNumber }
    >;

    "SignalSetAdmin(address,address,bytes32,uint256)"(
      target?: null,
      admin?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { target: string; admin: string; action: string; nonce: BigNumber }
    >;

    SignalSetAdmin(
      target?: null,
      admin?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { target: string; admin: string; action: string; nonce: BigNumber }
    >;

    "SignalSetGov(address,address,address,bytes32,uint256)"(
      timelock?: null,
      target?: null,
      gov?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        timelock: string;
        target: string;
        gov: string;
        action: string;
        nonce: BigNumber;
      }
    >;

    SignalSetGov(
      timelock?: null,
      target?: null,
      gov?: null,
      action?: null,
      nonce?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        timelock: string;
        target: string;
        gov: string;
        action: string;
        nonce: BigNumber;
      }
    >;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    BURN_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    backedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    baseMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _amount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBurnAmountOut(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _signers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isHandler(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isSigner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: BigNumberish,
      _maxCost: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    mintedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    multiplierPrecision(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveNFTs(
      _token: string,
      _sender: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveToken(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _target: string,
      _admin: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBackedSupply(
      _backedSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _timelock: string,
      _target: string,
      _gov: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintMultiplier(
      _mintMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signApproveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signApproveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signSetAdmin(
      _target: string,
      _admin: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signSetGov(
      _timelock: string,
      _target: string,
      _gov: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalApproveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalApproveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalSetAdmin(
      _target: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalSetGov(
      _timelock: string,
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signedActions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    signersLength(overrides?: CallOverrides): Promise<BigNumber>;

    zomi(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BURN_BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    actionsNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    backedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseMintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      _amount: BigNumberish,
      _minOut: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBurnAmountOut(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _signers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isHandler(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSigner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuthorizations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _amount: BigNumberish,
      _maxCost: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplierPrecision(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingActions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveNFTs(
      _token: string,
      _sender: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _target: string,
      _admin: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBackedSupply(
      _backedSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _timelock: string,
      _target: string,
      _gov: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHandler(
      _handler: string,
      _isHandler: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintMultiplier(
      _mintMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signApproveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signApproveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signSetAdmin(
      _target: string,
      _admin: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signSetGov(
      _timelock: string,
      _target: string,
      _gov: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalApprove(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalApproveNFT(
      _token: string,
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalApproveNFTs(
      _token: string,
      _spender: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalSetAdmin(
      _target: string,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalSetGov(
      _timelock: string,
      _target: string,
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signedActions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zomi(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
