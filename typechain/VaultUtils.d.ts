/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VaultUtilsInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "FUNDING_RATE_PRECISION()": FunctionFragment;
    "getBuyUsdgFeeBasisPoints(address,uint256)": FunctionFragment;
    "getEntryFundingRate(address,address,bool)": FunctionFragment;
    "getFeeBasisPoints(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "getFundingFee(address,address,address,bool,uint256,uint256)": FunctionFragment;
    "getPositionFee(address,address,address,bool,uint256)": FunctionFragment;
    "getSellUsdgFeeBasisPoints(address,uint256)": FunctionFragment;
    "getSwapFeeBasisPoints(address,address,uint256)": FunctionFragment;
    "gov()": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "updateCumulativeFundingRate(address,address)": FunctionFragment;
    "validateDecreasePosition(address,address,address,uint256,uint256,bool,address)": FunctionFragment;
    "validateIncreasePosition(address,address,address,uint256,bool)": FunctionFragment;
    "validateLiquidation(address,address,address,bool,bool)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUNDING_RATE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyUsdgFeeBasisPoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryFundingRate",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBasisPoints",
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingFee",
    values: [string, string, string, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionFee",
    values: [string, string, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellUsdgFeeBasisPoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeeBasisPoints",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateCumulativeFundingRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDecreasePosition",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIncreasePosition",
    values: [string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validateLiquidation",
    values: [string, string, string, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUNDING_RATE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyUsdgFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellUsdgFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCumulativeFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export class VaultUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultUtilsInterface;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBuyUsdgFeeBasisPoints(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEntryFundingRate(
      _collateralToken: string,
      arg1: string,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeBasisPoints(
      _token: string,
      _usdgDelta: BigNumberish,
      _feeBasisPoints: BigNumberish,
      _taxBasisPoints: BigNumberish,
      _increment: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFundingFee(
      arg0: string,
      _collateralToken: string,
      arg2: string,
      arg3: boolean,
      _size: BigNumberish,
      _entryFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPositionFee(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: boolean,
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellUsdgFeeBasisPoints(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapFeeBasisPoints(
      _tokenIn: string,
      _tokenOut: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCumulativeFundingRate(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateDecreasePosition(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: boolean,
      arg6: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateIncreasePosition(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  getBuyUsdgFeeBasisPoints(
    _token: string,
    _usdgAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntryFundingRate(
    _collateralToken: string,
    arg1: string,
    arg2: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeBasisPoints(
    _token: string,
    _usdgDelta: BigNumberish,
    _feeBasisPoints: BigNumberish,
    _taxBasisPoints: BigNumberish,
    _increment: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundingFee(
    arg0: string,
    _collateralToken: string,
    arg2: string,
    arg3: boolean,
    _size: BigNumberish,
    _entryFundingRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionFee(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: boolean,
    _sizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellUsdgFeeBasisPoints(
    _token: string,
    _usdgAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapFeeBasisPoints(
    _tokenIn: string,
    _tokenOut: string,
    _usdgAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCumulativeFundingRate(
    arg0: string,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateDecreasePosition(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: boolean,
    arg6: string,
    overrides?: CallOverrides
  ): Promise<void>;

  validateIncreasePosition(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    arg4: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  validateLiquidation(
    _account: string,
    _collateralToken: string,
    _indexToken: string,
    _isLong: boolean,
    _raise: boolean,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyUsdgFeeBasisPoints(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntryFundingRate(
      _collateralToken: string,
      arg1: string,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: string,
      _usdgDelta: BigNumberish,
      _feeBasisPoints: BigNumberish,
      _taxBasisPoints: BigNumberish,
      _increment: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingFee(
      arg0: string,
      _collateralToken: string,
      arg2: string,
      arg3: boolean,
      _size: BigNumberish,
      _entryFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionFee(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: boolean,
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellUsdgFeeBasisPoints(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFeeBasisPoints(
      _tokenIn: string,
      _tokenOut: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    updateCumulativeFundingRate(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateDecreasePosition(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: boolean,
      arg6: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validateIncreasePosition(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyUsdgFeeBasisPoints(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntryFundingRate(
      _collateralToken: string,
      arg1: string,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: string,
      _usdgDelta: BigNumberish,
      _feeBasisPoints: BigNumberish,
      _taxBasisPoints: BigNumberish,
      _increment: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingFee(
      arg0: string,
      _collateralToken: string,
      arg2: string,
      arg3: boolean,
      _size: BigNumberish,
      _entryFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionFee(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: boolean,
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellUsdgFeeBasisPoints(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFeeBasisPoints(
      _tokenIn: string,
      _tokenOut: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCumulativeFundingRate(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateDecreasePosition(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: boolean,
      arg6: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateIncreasePosition(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FUNDING_RATE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyUsdgFeeBasisPoints(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntryFundingRate(
      _collateralToken: string,
      arg1: string,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeBasisPoints(
      _token: string,
      _usdgDelta: BigNumberish,
      _feeBasisPoints: BigNumberish,
      _taxBasisPoints: BigNumberish,
      _increment: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingFee(
      arg0: string,
      _collateralToken: string,
      arg2: string,
      arg3: boolean,
      _size: BigNumberish,
      _entryFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionFee(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: boolean,
      _sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellUsdgFeeBasisPoints(
      _token: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFeeBasisPoints(
      _tokenIn: string,
      _tokenOut: string,
      _usdgAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCumulativeFundingRate(
      arg0: string,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateDecreasePosition(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: boolean,
      arg6: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateIncreasePosition(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateLiquidation(
      _account: string,
      _collateralToken: string,
      _indexToken: string,
      _isLong: boolean,
      _raise: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
