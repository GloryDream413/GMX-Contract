/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PositionRouterInterface extends ethers.utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "callbackGasLimit()": FunctionFragment;
    "cancelDecreasePosition(bytes32,address)": FunctionFragment;
    "cancelIncreasePosition(bytes32,address)": FunctionFragment;
    "createDecreasePosition(address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,bool,address)": FunctionFragment;
    "createIncreasePosition(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32,address)": FunctionFragment;
    "createIncreasePositionETH(address[],address,uint256,uint256,bool,uint256,uint256,bytes32,address)": FunctionFragment;
    "decreasePositionRequestKeys(uint256)": FunctionFragment;
    "decreasePositionRequestKeysStart()": FunctionFragment;
    "decreasePositionRequests(bytes32)": FunctionFragment;
    "decreasePositionsIndex(address)": FunctionFragment;
    "depositFee()": FunctionFragment;
    "feeReserves(address)": FunctionFragment;
    "getDecreasePositionRequestPath(bytes32)": FunctionFragment;
    "getIncreasePositionRequestPath(bytes32)": FunctionFragment;
    "getRequestKey(address,uint256)": FunctionFragment;
    "getRequestQueueLengths()": FunctionFragment;
    "gov()": FunctionFragment;
    "increasePositionBufferBps()": FunctionFragment;
    "increasePositionRequestKeys(uint256)": FunctionFragment;
    "increasePositionRequestKeysStart()": FunctionFragment;
    "increasePositionRequests(bytes32)": FunctionFragment;
    "increasePositionsIndex(address)": FunctionFragment;
    "isLeverageEnabled()": FunctionFragment;
    "isPositionKeeper(address)": FunctionFragment;
    "maxGlobalLongSizes(address)": FunctionFragment;
    "maxGlobalShortSizes(address)": FunctionFragment;
    "maxTimeDelay()": FunctionFragment;
    "minBlockDelayKeeper()": FunctionFragment;
    "minExecutionFee()": FunctionFragment;
    "minTimeDelayPublic()": FunctionFragment;
    "referralStorage()": FunctionFragment;
    "router()": FunctionFragment;
    "sendValue(address,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setCallbackGasLimit(uint256)": FunctionFragment;
    "setDelayValues(uint256,uint256,uint256)": FunctionFragment;
    "setDepositFee(uint256)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setIncreasePositionBufferBps(uint256)": FunctionFragment;
    "setIsLeverageEnabled(bool)": FunctionFragment;
    "setMaxGlobalSizes(address[],uint256[],uint256[])": FunctionFragment;
    "setMinExecutionFee(uint256)": FunctionFragment;
    "setPositionKeeper(address,bool)": FunctionFragment;
    "setReferralStorage(address)": FunctionFragment;
    "setRequestKeysStartValues(uint256,uint256)": FunctionFragment;
    "shortsTracker()": FunctionFragment;
    "vault()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawFees(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDecreasePosition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreasePosition",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreasePosition",
    values: [
      string[],
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePosition",
    values: [
      string[],
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePositionETH",
    values: [
      string[],
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionsIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeReserves", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDecreasePositionRequestPath",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreasePositionRequestPath",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestKey",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestQueueLengths",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increasePositionBufferBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionsIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeverageEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalLongSizes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalShortSizes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimeDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBlockDelayKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minExecutionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeDelayPublic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCallbackGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayValues",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setIncreasePositionBufferBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLeverageEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalSizes",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinExecutionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionKeeper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestKeysStartValues",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shortsTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePositionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecreasePositionRequestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreasePositionRequestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestQueueLengths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalLongSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlockDelayKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeDelayPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIncreasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestKeysStartValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortsTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "Callback(address,bool)": EventFragment;
    "CancelDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "CancelIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)": EventFragment;
    "CreateDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "CreateIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)": EventFragment;
    "ExecuteDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ExecuteIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)": EventFragment;
    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)": EventFragment;
    "SetAdmin(address)": EventFragment;
    "SetCallbackGasLimit(uint256)": EventFragment;
    "SetDelayValues(uint256,uint256,uint256)": EventFragment;
    "SetDepositFee(uint256)": EventFragment;
    "SetIncreasePositionBufferBps(uint256)": EventFragment;
    "SetIsLeverageEnabled(bool)": EventFragment;
    "SetMaxGlobalSizes(address[],uint256[],uint256[])": EventFragment;
    "SetMinExecutionFee(uint256)": EventFragment;
    "SetPositionKeeper(address,bool)": EventFragment;
    "SetReferralStorage(address)": EventFragment;
    "SetRequestKeysStartValues(uint256,uint256)": EventFragment;
    "WithdrawFees(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Callback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelDecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelIncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateDecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateIncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreasePositionReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteDecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteIncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePositionReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCallbackGasLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDelayValues"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositFee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetIncreasePositionBufferBps"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetIsLeverageEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxGlobalSizes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinExecutionFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPositionKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferralStorage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRequestKeysStartValues"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
}

export type CallbackEvent = TypedEvent<
  [string, boolean] & { callbackTarget: string; success: boolean }
>;

export type CancelDecreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    account: string;
    path: string[];
    indexToken: string;
    collateralDelta: BigNumber;
    sizeDelta: BigNumber;
    isLong: boolean;
    receiver: string;
    acceptablePrice: BigNumber;
    minOut: BigNumber;
    executionFee: BigNumber;
    blockGap: BigNumber;
    timeGap: BigNumber;
  }
>;

export type CancelIncreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    account: string;
    path: string[];
    indexToken: string;
    amountIn: BigNumber;
    minOut: BigNumber;
    sizeDelta: BigNumber;
    isLong: boolean;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    blockGap: BigNumber;
    timeGap: BigNumber;
  }
>;

export type CreateDecreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    account: string;
    path: string[];
    indexToken: string;
    collateralDelta: BigNumber;
    sizeDelta: BigNumber;
    isLong: boolean;
    receiver: string;
    acceptablePrice: BigNumber;
    minOut: BigNumber;
    executionFee: BigNumber;
    index: BigNumber;
    queueIndex: BigNumber;
    blockNumber: BigNumber;
    blockTime: BigNumber;
  }
>;

export type CreateIncreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    account: string;
    path: string[];
    indexToken: string;
    amountIn: BigNumber;
    minOut: BigNumber;
    sizeDelta: BigNumber;
    isLong: boolean;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    index: BigNumber;
    queueIndex: BigNumber;
    blockNumber: BigNumber;
    blockTime: BigNumber;
    gasPrice: BigNumber;
  }
>;

export type DecreasePositionReferralEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string] & {
    account: string;
    sizeDelta: BigNumber;
    marginFeeBasisPoints: BigNumber;
    referralCode: string;
    referrer: string;
  }
>;

export type ExecuteDecreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    account: string;
    path: string[];
    indexToken: string;
    collateralDelta: BigNumber;
    sizeDelta: BigNumber;
    isLong: boolean;
    receiver: string;
    acceptablePrice: BigNumber;
    minOut: BigNumber;
    executionFee: BigNumber;
    blockGap: BigNumber;
    timeGap: BigNumber;
  }
>;

export type ExecuteIncreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    account: string;
    path: string[];
    indexToken: string;
    amountIn: BigNumber;
    minOut: BigNumber;
    sizeDelta: BigNumber;
    isLong: boolean;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    blockGap: BigNumber;
    timeGap: BigNumber;
  }
>;

export type IncreasePositionReferralEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string] & {
    account: string;
    sizeDelta: BigNumber;
    marginFeeBasisPoints: BigNumber;
    referralCode: string;
    referrer: string;
  }
>;

export type SetAdminEvent = TypedEvent<[string] & { admin: string }>;

export type SetCallbackGasLimitEvent = TypedEvent<
  [BigNumber] & { callbackGasLimit: BigNumber }
>;

export type SetDelayValuesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    minBlockDelayKeeper: BigNumber;
    minTimeDelayPublic: BigNumber;
    maxTimeDelay: BigNumber;
  }
>;

export type SetDepositFeeEvent = TypedEvent<
  [BigNumber] & { depositFee: BigNumber }
>;

export type SetIncreasePositionBufferBpsEvent = TypedEvent<
  [BigNumber] & { increasePositionBufferBps: BigNumber }
>;

export type SetIsLeverageEnabledEvent = TypedEvent<
  [boolean] & { isLeverageEnabled: boolean }
>;

export type SetMaxGlobalSizesEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]] & {
    tokens: string[];
    longSizes: BigNumber[];
    shortSizes: BigNumber[];
  }
>;

export type SetMinExecutionFeeEvent = TypedEvent<
  [BigNumber] & { minExecutionFee: BigNumber }
>;

export type SetPositionKeeperEvent = TypedEvent<
  [string, boolean] & { account: string; isActive: boolean }
>;

export type SetReferralStorageEvent = TypedEvent<
  [string] & { referralStorage: string }
>;

export type SetRequestKeysStartValuesEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    increasePositionRequestKeysStart: BigNumber;
    decreasePositionRequestKeysStart: BigNumber;
  }
>;

export type WithdrawFeesEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    receiver: string;
    amount: BigNumber;
  }
>;

export class PositionRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PositionRouterInterface;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callbackGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelDecreasePosition(
      _key: BytesLike,
      _executionFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelIncreasePosition(
      _key: BytesLike,
      _executionFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDecreasePosition(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _acceptablePrice: BigNumberish,
      _minOut: BigNumberish,
      _executionFee: BigNumberish,
      _withdrawETH: boolean,
      _callbackTarget: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createIncreasePosition(
      _path: string[],
      _indexToken: string,
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createIncreasePositionETH(
      _path: string[],
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePositionRequestKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreasePositionRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        receiver: string;
        acceptablePrice: BigNumber;
        minOut: BigNumber;
        executionFee: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
        withdrawETH: boolean;
        callbackTarget: string;
      }
    >;

    decreasePositionsIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeReserves(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDecreasePositionRequestPath(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getIncreasePositionRequestPath(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRequestKey(
      _account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRequestQueueLengths(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    increasePositionRequestKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increasePositionRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        acceptablePrice: BigNumber;
        executionFee: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
        hasCollateralInETH: boolean;
        callbackTarget: string;
      }
    >;

    increasePositionsIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isPositionKeeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxGlobalLongSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxGlobalShortSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTimeDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBlockDelayKeeper(overrides?: CallOverrides): Promise<[BigNumber]>;

    minExecutionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTimeDelayPublic(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralStorage(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sendValue(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCallbackGasLimit(
      _callbackGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelayValues(
      _minBlockDelayKeeper: BigNumberish,
      _minTimeDelayPublic: BigNumberish,
      _maxTimeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositFee(
      _depositFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsLeverageEnabled(
      _isLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxGlobalSizes(
      _tokens: string[],
      _longSizes: BigNumberish[],
      _shortSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinExecutionFee(
      _minExecutionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPositionKeeper(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferralStorage(
      _referralStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequestKeysStartValues(
      _increasePositionRequestKeysStart: BigNumberish,
      _decreasePositionRequestKeysStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortsTracker(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: string,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  cancelDecreasePosition(
    _key: BytesLike,
    _executionFeeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelIncreasePosition(
    _key: BytesLike,
    _executionFeeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDecreasePosition(
    _path: string[],
    _indexToken: string,
    _collateralDelta: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _receiver: string,
    _acceptablePrice: BigNumberish,
    _minOut: BigNumberish,
    _executionFee: BigNumberish,
    _withdrawETH: boolean,
    _callbackTarget: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createIncreasePosition(
    _path: string[],
    _indexToken: string,
    _amountIn: BigNumberish,
    _minOut: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _acceptablePrice: BigNumberish,
    _executionFee: BigNumberish,
    _referralCode: BytesLike,
    _callbackTarget: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createIncreasePositionETH(
    _path: string[],
    _indexToken: string,
    _minOut: BigNumberish,
    _sizeDelta: BigNumberish,
    _isLong: boolean,
    _acceptablePrice: BigNumberish,
    _executionFee: BigNumberish,
    _referralCode: BytesLike,
    _callbackTarget: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePositionRequestKeys(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  decreasePositionRequestKeysStart(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreasePositionRequests(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      account: string;
      indexToken: string;
      collateralDelta: BigNumber;
      sizeDelta: BigNumber;
      isLong: boolean;
      receiver: string;
      acceptablePrice: BigNumber;
      minOut: BigNumber;
      executionFee: BigNumber;
      blockNumber: BigNumber;
      blockTime: BigNumber;
      withdrawETH: boolean;
      callbackTarget: string;
    }
  >;

  decreasePositionsIndex(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  feeReserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getDecreasePositionRequestPath(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getIncreasePositionRequestPath(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRequestKey(
    _account: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRequestQueueLengths(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  gov(overrides?: CallOverrides): Promise<string>;

  increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

  increasePositionRequestKeys(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  increasePositionRequestKeysStart(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increasePositionRequests(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      account: string;
      indexToken: string;
      amountIn: BigNumber;
      minOut: BigNumber;
      sizeDelta: BigNumber;
      isLong: boolean;
      acceptablePrice: BigNumber;
      executionFee: BigNumber;
      blockNumber: BigNumber;
      blockTime: BigNumber;
      hasCollateralInETH: boolean;
      callbackTarget: string;
    }
  >;

  increasePositionsIndex(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

  isPositionKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  maxGlobalLongSizes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxGlobalShortSizes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxTimeDelay(overrides?: CallOverrides): Promise<BigNumber>;

  minBlockDelayKeeper(overrides?: CallOverrides): Promise<BigNumber>;

  minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

  minTimeDelayPublic(overrides?: CallOverrides): Promise<BigNumber>;

  referralStorage(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  sendValue(
    _receiver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCallbackGasLimit(
    _callbackGasLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelayValues(
    _minBlockDelayKeeper: BigNumberish,
    _minTimeDelayPublic: BigNumberish,
    _maxTimeDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositFee(
    _depositFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIncreasePositionBufferBps(
    _increasePositionBufferBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsLeverageEnabled(
    _isLeverageEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxGlobalSizes(
    _tokens: string[],
    _longSizes: BigNumberish[],
    _shortSizes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinExecutionFee(
    _minExecutionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPositionKeeper(
    _account: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferralStorage(
    _referralStorage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequestKeysStartValues(
    _increasePositionRequestKeysStart: BigNumberish,
    _decreasePositionRequestKeysStart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortsTracker(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawFees(
    _token: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDecreasePosition(
      _key: BytesLike,
      _executionFeeReceiver: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelIncreasePosition(
      _key: BytesLike,
      _executionFeeReceiver: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createDecreasePosition(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _acceptablePrice: BigNumberish,
      _minOut: BigNumberish,
      _executionFee: BigNumberish,
      _withdrawETH: boolean,
      _callbackTarget: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createIncreasePosition(
      _path: string[],
      _indexToken: string,
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createIncreasePositionETH(
      _path: string[],
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: string,
      overrides?: CallOverrides
    ): Promise<string>;

    decreasePositionRequestKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        receiver: string;
        acceptablePrice: BigNumber;
        minOut: BigNumber;
        executionFee: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
        withdrawETH: boolean;
        callbackTarget: string;
      }
    >;

    decreasePositionsIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    feeReserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDecreasePositionRequestPath(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getIncreasePositionRequestPath(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRequestKey(
      _account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRequestQueueLengths(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    gov(overrides?: CallOverrides): Promise<string>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionRequestKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        acceptablePrice: BigNumber;
        executionFee: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
        hasCollateralInETH: boolean;
        callbackTarget: string;
      }
    >;

    increasePositionsIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

    isPositionKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    maxGlobalLongSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTimeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockDelayKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeDelayPublic(overrides?: CallOverrides): Promise<BigNumber>;

    referralStorage(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    sendValue(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setCallbackGasLimit(
      _callbackGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelayValues(
      _minBlockDelayKeeper: BigNumberish,
      _minTimeDelayPublic: BigNumberish,
      _maxTimeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositFee(
      _depositFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsLeverageEnabled(
      _isLeverageEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGlobalSizes(
      _tokens: string[],
      _longSizes: BigNumberish[],
      _shortSizes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinExecutionFee(
      _minExecutionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPositionKeeper(
      _account: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralStorage(
      _referralStorage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestKeysStartValues(
      _increasePositionRequestKeysStart: BigNumberish,
      _decreasePositionRequestKeysStart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shortsTracker(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Callback(address,bool)"(
      callbackTarget?: null,
      success?: null
    ): TypedEventFilter<
      [string, boolean],
      { callbackTarget: string; success: boolean }
    >;

    Callback(
      callbackTarget?: null,
      success?: null
    ): TypedEventFilter<
      [string, boolean],
      { callbackTarget: string; success: boolean }
    >;

    "CancelDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        receiver: string;
        acceptablePrice: BigNumber;
        minOut: BigNumber;
        executionFee: BigNumber;
        blockGap: BigNumber;
        timeGap: BigNumber;
      }
    >;

    CancelDecreasePosition(
      account?: string | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        receiver: string;
        acceptablePrice: BigNumber;
        minOut: BigNumber;
        executionFee: BigNumber;
        blockGap: BigNumber;
        timeGap: BigNumber;
      }
    >;

    "CancelIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        acceptablePrice: BigNumber;
        executionFee: BigNumber;
        blockGap: BigNumber;
        timeGap: BigNumber;
      }
    >;

    CancelIncreasePosition(
      account?: string | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        acceptablePrice: BigNumber;
        executionFee: BigNumber;
        blockGap: BigNumber;
        timeGap: BigNumber;
      }
    >;

    "CreateDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null,
      blockNumber?: null,
      blockTime?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        receiver: string;
        acceptablePrice: BigNumber;
        minOut: BigNumber;
        executionFee: BigNumber;
        index: BigNumber;
        queueIndex: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
      }
    >;

    CreateDecreasePosition(
      account?: string | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null,
      blockNumber?: null,
      blockTime?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        receiver: string;
        acceptablePrice: BigNumber;
        minOut: BigNumber;
        executionFee: BigNumber;
        index: BigNumber;
        queueIndex: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
      }
    >;

    "CreateIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null,
      blockNumber?: null,
      blockTime?: null,
      gasPrice?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        acceptablePrice: BigNumber;
        executionFee: BigNumber;
        index: BigNumber;
        queueIndex: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    CreateIncreasePosition(
      account?: string | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null,
      blockNumber?: null,
      blockTime?: null,
      gasPrice?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        acceptablePrice: BigNumber;
        executionFee: BigNumber;
        index: BigNumber;
        queueIndex: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
        gasPrice: BigNumber;
      }
    >;

    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)"(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        account: string;
        sizeDelta: BigNumber;
        marginFeeBasisPoints: BigNumber;
        referralCode: string;
        referrer: string;
      }
    >;

    DecreasePositionReferral(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        account: string;
        sizeDelta: BigNumber;
        marginFeeBasisPoints: BigNumber;
        referralCode: string;
        referrer: string;
      }
    >;

    "ExecuteDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        receiver: string;
        acceptablePrice: BigNumber;
        minOut: BigNumber;
        executionFee: BigNumber;
        blockGap: BigNumber;
        timeGap: BigNumber;
      }
    >;

    ExecuteDecreasePosition(
      account?: string | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        receiver: string;
        acceptablePrice: BigNumber;
        minOut: BigNumber;
        executionFee: BigNumber;
        blockGap: BigNumber;
        timeGap: BigNumber;
      }
    >;

    "ExecuteIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        acceptablePrice: BigNumber;
        executionFee: BigNumber;
        blockGap: BigNumber;
        timeGap: BigNumber;
      }
    >;

    ExecuteIncreasePosition(
      account?: string | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): TypedEventFilter<
      [
        string,
        string[],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        account: string;
        path: string[];
        indexToken: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        acceptablePrice: BigNumber;
        executionFee: BigNumber;
        blockGap: BigNumber;
        timeGap: BigNumber;
      }
    >;

    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)"(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        account: string;
        sizeDelta: BigNumber;
        marginFeeBasisPoints: BigNumber;
        referralCode: string;
        referrer: string;
      }
    >;

    IncreasePositionReferral(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        account: string;
        sizeDelta: BigNumber;
        marginFeeBasisPoints: BigNumber;
        referralCode: string;
        referrer: string;
      }
    >;

    "SetAdmin(address)"(
      admin?: null
    ): TypedEventFilter<[string], { admin: string }>;

    SetAdmin(admin?: null): TypedEventFilter<[string], { admin: string }>;

    "SetCallbackGasLimit(uint256)"(
      callbackGasLimit?: null
    ): TypedEventFilter<[BigNumber], { callbackGasLimit: BigNumber }>;

    SetCallbackGasLimit(
      callbackGasLimit?: null
    ): TypedEventFilter<[BigNumber], { callbackGasLimit: BigNumber }>;

    "SetDelayValues(uint256,uint256,uint256)"(
      minBlockDelayKeeper?: null,
      minTimeDelayPublic?: null,
      maxTimeDelay?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        minBlockDelayKeeper: BigNumber;
        minTimeDelayPublic: BigNumber;
        maxTimeDelay: BigNumber;
      }
    >;

    SetDelayValues(
      minBlockDelayKeeper?: null,
      minTimeDelayPublic?: null,
      maxTimeDelay?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        minBlockDelayKeeper: BigNumber;
        minTimeDelayPublic: BigNumber;
        maxTimeDelay: BigNumber;
      }
    >;

    "SetDepositFee(uint256)"(
      depositFee?: null
    ): TypedEventFilter<[BigNumber], { depositFee: BigNumber }>;

    SetDepositFee(
      depositFee?: null
    ): TypedEventFilter<[BigNumber], { depositFee: BigNumber }>;

    "SetIncreasePositionBufferBps(uint256)"(
      increasePositionBufferBps?: null
    ): TypedEventFilter<[BigNumber], { increasePositionBufferBps: BigNumber }>;

    SetIncreasePositionBufferBps(
      increasePositionBufferBps?: null
    ): TypedEventFilter<[BigNumber], { increasePositionBufferBps: BigNumber }>;

    "SetIsLeverageEnabled(bool)"(
      isLeverageEnabled?: null
    ): TypedEventFilter<[boolean], { isLeverageEnabled: boolean }>;

    SetIsLeverageEnabled(
      isLeverageEnabled?: null
    ): TypedEventFilter<[boolean], { isLeverageEnabled: boolean }>;

    "SetMaxGlobalSizes(address[],uint256[],uint256[])"(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { tokens: string[]; longSizes: BigNumber[]; shortSizes: BigNumber[] }
    >;

    SetMaxGlobalSizes(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { tokens: string[]; longSizes: BigNumber[]; shortSizes: BigNumber[] }
    >;

    "SetMinExecutionFee(uint256)"(
      minExecutionFee?: null
    ): TypedEventFilter<[BigNumber], { minExecutionFee: BigNumber }>;

    SetMinExecutionFee(
      minExecutionFee?: null
    ): TypedEventFilter<[BigNumber], { minExecutionFee: BigNumber }>;

    "SetPositionKeeper(address,bool)"(
      account?: string | null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isActive: boolean }
    >;

    SetPositionKeeper(
      account?: string | null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isActive: boolean }
    >;

    "SetReferralStorage(address)"(
      referralStorage?: null
    ): TypedEventFilter<[string], { referralStorage: string }>;

    SetReferralStorage(
      referralStorage?: null
    ): TypedEventFilter<[string], { referralStorage: string }>;

    "SetRequestKeysStartValues(uint256,uint256)"(
      increasePositionRequestKeysStart?: null,
      decreasePositionRequestKeysStart?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        increasePositionRequestKeysStart: BigNumber;
        decreasePositionRequestKeysStart: BigNumber;
      }
    >;

    SetRequestKeysStartValues(
      increasePositionRequestKeysStart?: null,
      decreasePositionRequestKeysStart?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        increasePositionRequestKeysStart: BigNumber;
        decreasePositionRequestKeysStart: BigNumber;
      }
    >;

    "WithdrawFees(address,address,uint256)"(
      token?: null,
      receiver?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; receiver: string; amount: BigNumber }
    >;

    WithdrawFees(
      token?: null,
      receiver?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; receiver: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDecreasePosition(
      _key: BytesLike,
      _executionFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelIncreasePosition(
      _key: BytesLike,
      _executionFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDecreasePosition(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _acceptablePrice: BigNumberish,
      _minOut: BigNumberish,
      _executionFee: BigNumberish,
      _withdrawETH: boolean,
      _callbackTarget: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createIncreasePosition(
      _path: string[],
      _indexToken: string,
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createIncreasePositionETH(
      _path: string[],
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePositionRequestKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionsIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    feeReserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDecreasePositionRequestPath(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncreasePositionRequestPath(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestKey(
      _account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestQueueLengths(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionRequestKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionsIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isPositionKeeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalLongSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTimeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockDelayKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeDelayPublic(overrides?: CallOverrides): Promise<BigNumber>;

    referralStorage(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sendValue(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCallbackGasLimit(
      _callbackGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelayValues(
      _minBlockDelayKeeper: BigNumberish,
      _minTimeDelayPublic: BigNumberish,
      _maxTimeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositFee(
      _depositFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsLeverageEnabled(
      _isLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxGlobalSizes(
      _tokens: string[],
      _longSizes: BigNumberish[],
      _shortSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinExecutionFee(
      _minExecutionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPositionKeeper(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferralStorage(
      _referralStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequestKeysStartValues(
      _increasePositionRequestKeysStart: BigNumberish,
      _decreasePositionRequestKeysStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortsTracker(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: string,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callbackGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelDecreasePosition(
      _key: BytesLike,
      _executionFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelIncreasePosition(
      _key: BytesLike,
      _executionFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDecreasePosition(
      _path: string[],
      _indexToken: string,
      _collateralDelta: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _receiver: string,
      _acceptablePrice: BigNumberish,
      _minOut: BigNumberish,
      _executionFee: BigNumberish,
      _withdrawETH: boolean,
      _callbackTarget: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createIncreasePosition(
      _path: string[],
      _indexToken: string,
      _amountIn: BigNumberish,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createIncreasePositionETH(
      _path: string[],
      _indexToken: string,
      _minOut: BigNumberish,
      _sizeDelta: BigNumberish,
      _isLong: boolean,
      _acceptablePrice: BigNumberish,
      _executionFee: BigNumberish,
      _referralCode: BytesLike,
      _callbackTarget: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositionRequestKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePositionRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePositionsIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecreasePositionRequestPath(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncreasePositionRequestPath(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestKey(
      _account: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestQueueLengths(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePositionBufferBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionRequestKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionsIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPositionKeeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGlobalLongSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGlobalShortSizes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTimeDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBlockDelayKeeper(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minExecutionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTimeDelayPublic(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendValue(
      _receiver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCallbackGasLimit(
      _callbackGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelayValues(
      _minBlockDelayKeeper: BigNumberish,
      _minTimeDelayPublic: BigNumberish,
      _maxTimeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      _depositFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsLeverageEnabled(
      _isLeverageEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGlobalSizes(
      _tokens: string[],
      _longSizes: BigNumberish[],
      _shortSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinExecutionFee(
      _minExecutionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPositionKeeper(
      _account: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferralStorage(
      _referralStorage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequestKeysStartValues(
      _increasePositionRequestKeysStart: BigNumberish,
      _decreasePositionRequestKeysStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortsTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(
      _token: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
